"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_react-animated-numbers_dist_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/memoize */ \"(app-pages-browser)/./node_modules/@emotion/memoize/dist/memoize.browser.esm.js\");\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\nvar index = (0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(function(prop) {\n    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvaXMtcHJvcC12YWxpZC5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOztBQUF1QztBQUV2QyxJQUFJQyxrQkFBa0IsNjVIQUE2NUgscURBQXFEO0FBRXgrSCxJQUFJQyxRQUFRRiw0REFBT0EsQ0FBQyxTQUFVRyxJQUFJO0lBQ2hDLE9BQU9GLGdCQUFnQkcsSUFBSSxDQUFDRCxTQUFTQSxLQUFLRSxVQUFVLENBQUMsT0FBTyxPQUV6REYsS0FBS0UsVUFBVSxDQUFDLE9BQU8sT0FFdkJGLEtBQUtFLFVBQVUsQ0FBQyxLQUFLO0FBQzFCO0FBSUEsK0RBQWVILEtBQUtBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzPzQ2OGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiJdLCJuYW1lcyI6WyJtZW1vaXplIiwicmVhY3RQcm9wc1JlZ2V4IiwiaW5kZXgiLCJwcm9wIiwidGVzdCIsImNoYXJDb2RlQXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/memoize/dist/memoize.browser.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nfunction memoize(fn) {\n    var cache = {};\n    return function(arg) {\n        if (cache[arg] === undefined) cache[arg] = fn(arg);\n        return cache[arg];\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (memoize);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsU0FBU0EsUUFBUUMsRUFBRTtJQUNqQixJQUFJQyxRQUFRLENBQUM7SUFDYixPQUFPLFNBQVVDLEdBQUc7UUFDbEIsSUFBSUQsS0FBSyxDQUFDQyxJQUFJLEtBQUtDLFdBQVdGLEtBQUssQ0FBQ0MsSUFBSSxHQUFHRixHQUFHRTtRQUM5QyxPQUFPRCxLQUFLLENBQUNDLElBQUk7SUFDbkI7QUFDRjtBQUVBLCtEQUFlSCxPQUFPQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcz8wODcwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iXSwibmFtZXMiOlsibWVtb2l6ZSIsImZuIiwiY2FjaGUiLCJhcmciLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/memoize/dist/memoize.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-animated-numbers/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-animated-numbers/dist/index.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n!function(t1, e) {\n    if (true) module.exports = e(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\n    else { var s, n; }\n}(self, function(t1) {\n    return (()=>{\n        \"use strict\";\n        var e = {\n            297: (e)=>{\n                e.exports = t1;\n            }\n        }, n = {};\n        function s(t1) {\n            var i = n[t1];\n            if (void 0 !== i) return i.exports;\n            var o = n[t1] = {\n                exports: {}\n            };\n            return e[t1](o, o.exports, s), o.exports;\n        }\n        s.n = (t1)=>{\n            var e = t1 && t1.__esModule ? ()=>t1.default : ()=>t1;\n            return s.d(e, {\n                a: e\n            }), e;\n        }, s.d = (t1, e)=>{\n            for(var n in e)s.o(e, n) && !s.o(t1, n) && Object.defineProperty(t1, n, {\n                enumerable: !0,\n                get: e[n]\n            });\n        }, s.o = (t1, e)=>Object.prototype.hasOwnProperty.call(t1, e), s.r = (t1)=>{\n            \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t1, Symbol.toStringTag, {\n                value: \"Module\"\n            }), Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            });\n        };\n        var i = {};\n        return (()=>{\n            var _s = $RefreshSig$();\n            s.r(i), s.d(i, {\n                default: ()=>jo\n            });\n            var t1 = s(297), e = s.n(t1);\n            const n = (t1)=>t1;\n            let o = n, r = n;\n            const a = {\n                some: 0,\n                all: 1\n            };\n            const l = (t1)=>/^\\-?\\d*\\.?\\d+$/.test(t1), u = (t1)=>/^0[^.\\s]+$/.test(t1), c = (t1)=>Array.isArray(t1);\n            function h(t1, e) {\n                -1 === t1.indexOf(e) && t1.push(e);\n            }\n            function d(t1, e) {\n                const n = t1.indexOf(e);\n                n > -1 && t1.splice(n, 1);\n            }\n            class m {\n                add(t1) {\n                    return h(this.subscriptions, t1), ()=>d(this.subscriptions, t1);\n                }\n                notify(t1, e, n) {\n                    const s = this.subscriptions.length;\n                    if (s) if (1 === s) this.subscriptions[0](t1, e, n);\n                    else for(let i = 0; i < s; i++){\n                        const s = this.subscriptions[i];\n                        s && s(t1, e, n);\n                    }\n                }\n                getSize() {\n                    return this.subscriptions.length;\n                }\n                clear() {\n                    this.subscriptions.length = 0;\n                }\n                constructor(){\n                    this.subscriptions = [];\n                }\n            }\n            function p(t1, e) {\n                return e ? t1 * (1e3 / e) : 0;\n            }\n            class f {\n                add(t1) {\n                    if (!this.scheduled.has(t1)) return this.scheduled.add(t1), this.order.push(t1), !0;\n                }\n                remove(t1) {\n                    const e = this.order.indexOf(t1);\n                    -1 !== e && (this.order.splice(e, 1), this.scheduled.delete(t1));\n                }\n                clear() {\n                    this.order.length = 0, this.scheduled.clear();\n                }\n                constructor(){\n                    this.order = [], this.scheduled = new Set;\n                }\n            }\n            const g = [\n                \"prepare\",\n                \"read\",\n                \"update\",\n                \"preRender\",\n                \"render\",\n                \"postRender\"\n            ], { schedule: y, cancel: v, state: x, steps: P } = function(t1, e) {\n                let n = !1, s = !0;\n                const i = {\n                    delta: 0,\n                    timestamp: 0,\n                    isProcessing: !1\n                }, o = g.reduce((t1, e)=>(t1[e] = function(t1) {\n                        let e = new f, n = new f, s = 0, i = !1, o = !1;\n                        const r = new WeakSet, a = {\n                            schedule: function(t1) {\n                                let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n                                const l = a && i, u = l ? e : n;\n                                return o && r.add(t1), u.add(t1) && l && i && (s = e.order.length), t1;\n                            },\n                            cancel: (t1)=>{\n                                n.remove(t1), r.delete(t1);\n                            },\n                            process: (l)=>{\n                                if (i) o = !0;\n                                else {\n                                    if (i = !0, [e, n] = [\n                                        n,\n                                        e\n                                    ], n.clear(), s = e.order.length, s) for(let n = 0; n < s; n++){\n                                        const s = e.order[n];\n                                        s(l), r.has(s) && (a.schedule(s), t1());\n                                    }\n                                    i = !1, o && (o = !1, a.process(l));\n                                }\n                            }\n                        };\n                        return a;\n                    }(()=>n = !0), t1), {}), r = (t1)=>o[t1].process(i), a = ()=>{\n                    const e = performance.now();\n                    n = !1, i.delta = s ? 1e3 / 60 : Math.max(Math.min(e - i.timestamp, 40), 1), i.timestamp = e, i.isProcessing = !0, g.forEach(r), i.isProcessing = !1, n && (s = !1, t1(a));\n                };\n                return {\n                    schedule: g.reduce((e, r)=>{\n                        const l = o[r];\n                        return e[r] = function(e) {\n                            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n                            return n || (n = !0, s = !0, i.isProcessing || t1(a)), l.schedule(e, o, r);\n                        }, e;\n                    }, {}),\n                    cancel: (t1)=>g.forEach((e)=>o[e].cancel(t1)),\n                    state: i,\n                    steps: o\n                };\n            }(\"undefined\" != typeof requestAnimationFrame ? requestAnimationFrame : n), b = {\n                current: void 0\n            };\n            class T {\n                onChange(t1) {\n                    return this.on(\"change\", t1);\n                }\n                on(t1, e) {\n                    this.events[t1] || (this.events[t1] = new m);\n                    const n = this.events[t1].add(e);\n                    return \"change\" === t1 ? ()=>{\n                        n(), y.read(()=>{\n                            this.events.change.getSize() || this.stop();\n                        });\n                    } : n;\n                }\n                clearListeners() {\n                    for(const t1 in this.events)this.events[t1].clear();\n                }\n                attach(t1, e) {\n                    this.passiveEffect = t1, this.stopPassiveEffect = e;\n                }\n                set(t1) {\n                    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n                    e && this.passiveEffect ? this.passiveEffect(t1, this.updateAndNotify) : this.updateAndNotify(t1, e);\n                }\n                setWithVelocity(t1, e, n) {\n                    this.set(e), this.prev = t1, this.timeDelta = n;\n                }\n                jump(t1) {\n                    this.updateAndNotify(t1), this.prev = t1, this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();\n                }\n                get() {\n                    return b.current && b.current.push(this), this.current;\n                }\n                getPrevious() {\n                    return this.prev;\n                }\n                getVelocity() {\n                    return this.canTrackVelocity ? p(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n                }\n                start(t1) {\n                    return this.stop(), new Promise((e)=>{\n                        this.hasAnimated = !0, this.animation = t1(e), this.events.animationStart && this.events.animationStart.notify();\n                    }).then(()=>{\n                        this.events.animationComplete && this.events.animationComplete.notify(), this.clearAnimation();\n                    });\n                }\n                stop() {\n                    this.animation && (this.animation.stop(), this.events.animationCancel && this.events.animationCancel.notify()), this.clearAnimation();\n                }\n                isAnimating() {\n                    return !!this.animation;\n                }\n                clearAnimation() {\n                    delete this.animation;\n                }\n                destroy() {\n                    this.clearListeners(), this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();\n                }\n                constructor(t1, e = {}){\n                    var _this = this;\n                    var n;\n                    this.version = \"10.16.5\", this.timeDelta = 0, this.lastUpdated = 0, this.canTrackVelocity = !1, this.events = {}, this.updateAndNotify = function(t1) {\n                        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n                        _this.prev = _this.current, _this.current = t1;\n                        const { delta: n, timestamp: s } = x;\n                        _this.lastUpdated !== s && (_this.timeDelta = n, _this.lastUpdated = s, y.postRender(_this.scheduleVelocityCheck)), _this.prev !== _this.current && _this.events.change && _this.events.change.notify(_this.current), _this.events.velocityChange && _this.events.velocityChange.notify(_this.getVelocity()), e && _this.events.renderRequest && _this.events.renderRequest.notify(_this.current);\n                    }, this.scheduleVelocityCheck = ()=>y.postRender(this.velocityCheck), this.velocityCheck = (param)=>{\n                        let { timestamp: t1 } = param;\n                        t1 !== this.lastUpdated && (this.prev = this.current, this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()));\n                    }, this.hasAnimated = !1, this.prev = this.current = t1, this.canTrackVelocity = (n = this.current, !isNaN(parseFloat(n))), this.owner = e.owner;\n                }\n            }\n            function S(t1, e) {\n                return new T(t1, e);\n            }\n            const w = (t1)=>(e)=>\"string\" == typeof e && e.startsWith(t1), E = w(\"--\"), A = w(\"var(--\"), V = (t1)=>Math.round(1e5 * t1) / 1e5, C = /(-)?([\\d]*\\.?[\\d])+/g, M = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi, D = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\n            function k(t1) {\n                return \"string\" == typeof t1;\n            }\n            const R = (t1, e, n)=>Math.min(Math.max(n, t1), e), L = {\n                test: (t1)=>\"number\" == typeof t1,\n                parse: parseFloat,\n                transform: (t1)=>t1\n            }, j = {\n                ...L,\n                transform: (t1)=>R(0, 1, t1)\n            }, B = {\n                ...L,\n                default: 1\n            }, F = (t1, e)=>(n)=>Boolean(k(n) && D.test(n) && n.startsWith(t1) || e && Object.prototype.hasOwnProperty.call(n, e)), O = (t1, e, n)=>(s)=>{\n                    if (!k(s)) return s;\n                    const [i, o, r, a] = s.match(C);\n                    return {\n                        [t1]: parseFloat(i),\n                        [e]: parseFloat(o),\n                        [n]: parseFloat(r),\n                        alpha: void 0 !== a ? parseFloat(a) : 1\n                    };\n                }, I = {\n                ...L,\n                transform: (t1)=>Math.round(((t1)=>R(0, 255, t1))(t1))\n            }, U = {\n                test: F(\"rgb\", \"red\"),\n                parse: O(\"red\", \"green\", \"blue\"),\n                transform: (param)=>{\n                    let { red: t1, green: e, blue: n, alpha: s = 1 } = param;\n                    return \"rgba(\" + I.transform(t1) + \", \" + I.transform(e) + \", \" + I.transform(n) + \", \" + V(j.transform(s)) + \")\";\n                }\n            }, N = {\n                test: F(\"#\"),\n                parse: function(t1) {\n                    let e = \"\", n = \"\", s = \"\", i = \"\";\n                    return t1.length > 5 ? (e = t1.substring(1, 3), n = t1.substring(3, 5), s = t1.substring(5, 7), i = t1.substring(7, 9)) : (e = t1.substring(1, 2), n = t1.substring(2, 3), s = t1.substring(3, 4), i = t1.substring(4, 5), e += e, n += n, s += s, i += i), {\n                        red: parseInt(e, 16),\n                        green: parseInt(n, 16),\n                        blue: parseInt(s, 16),\n                        alpha: i ? parseInt(i, 16) / 255 : 1\n                    };\n                },\n                transform: U.transform\n            }, $ = (t1)=>({\n                    test: (e)=>k(e) && e.endsWith(t1) && 1 === e.split(\" \").length,\n                    parse: parseFloat,\n                    transform: (e)=>\"\".concat(e).concat(t1)\n                }), W = $(\"deg\"), H = $(\"%\"), z = $(\"px\"), Y = $(\"vh\"), X = $(\"vw\"), G = {\n                ...H,\n                parse: (t1)=>H.parse(t1) / 100,\n                transform: (t1)=>H.transform(100 * t1)\n            }, q = {\n                test: F(\"hsl\", \"hue\"),\n                parse: O(\"hue\", \"saturation\", \"lightness\"),\n                transform: (param)=>{\n                    let { hue: t1, saturation: e, lightness: n, alpha: s = 1 } = param;\n                    return \"hsla(\" + Math.round(t1) + \", \" + H.transform(V(e)) + \", \" + H.transform(V(n)) + \", \" + V(j.transform(s)) + \")\";\n                }\n            }, Z = {\n                test: (t1)=>U.test(t1) || N.test(t1) || q.test(t1),\n                parse: (t1)=>U.test(t1) ? U.parse(t1) : q.test(t1) ? q.parse(t1) : N.parse(t1),\n                transform: (t1)=>k(t1) ? t1 : t1.hasOwnProperty(\"red\") ? U.transform(t1) : q.transform(t1)\n            }, K = {\n                regex: /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)/g,\n                countKey: \"Vars\",\n                token: \"${v}\",\n                parse: n\n            }, _ = {\n                regex: M,\n                countKey: \"Colors\",\n                token: \"${c}\",\n                parse: Z.parse\n            }, J = {\n                regex: C,\n                countKey: \"Numbers\",\n                token: \"${n}\",\n                parse: L.parse\n            };\n            function Q(t1, param) {\n                let { regex: e, countKey: n, token: s, parse: i } = param;\n                const o = t1.tokenised.match(e);\n                o && (t1[\"num\" + n] = o.length, t1.tokenised = t1.tokenised.replace(e, s), t1.values.push(...o.map(i)));\n            }\n            function tt(t1) {\n                const e = t1.toString(), n = {\n                    value: e,\n                    tokenised: e,\n                    values: [],\n                    numVars: 0,\n                    numColors: 0,\n                    numNumbers: 0\n                };\n                return n.value.includes(\"var(--\") && Q(n, K), Q(n, _), Q(n, J), n;\n            }\n            function et(t1) {\n                return tt(t1).values;\n            }\n            function nt(t1) {\n                const { values: e, numColors: n, numVars: s, tokenised: i } = tt(t1), o = e.length;\n                return (t1)=>{\n                    let e = i;\n                    for(let i = 0; i < o; i++)e = i < s ? e.replace(K.token, t1[i]) : i < s + n ? e.replace(_.token, Z.transform(t1[i])) : e.replace(J.token, V(t1[i]));\n                    return e;\n                };\n            }\n            const st = (t1)=>\"number\" == typeof t1 ? 0 : t1, it = {\n                test: function(t1) {\n                    var e, n;\n                    return isNaN(t1) && k(t1) && ((null === (e = t1.match(C)) || void 0 === e ? void 0 : e.length) || 0) + ((null === (n = t1.match(M)) || void 0 === n ? void 0 : n.length) || 0) > 0;\n                },\n                parse: et,\n                createTransformer: nt,\n                getAnimatableNone: function(t1) {\n                    const e = et(t1);\n                    return nt(t1)(e.map(st));\n                }\n            }, ot = new Set([\n                \"brightness\",\n                \"contrast\",\n                \"saturate\",\n                \"opacity\"\n            ]);\n            function rt(t1) {\n                const [e, n] = t1.slice(0, -1).split(\"(\");\n                if (\"drop-shadow\" === e) return t1;\n                const [s] = n.match(C) || [];\n                if (!s) return t1;\n                const i = n.replace(s, \"\");\n                let o = ot.has(e) ? 1 : 0;\n                return s !== n && (o *= 100), e + \"(\" + o + i + \")\";\n            }\n            const at = /([a-z-]*)\\(.*?\\)/g, lt = {\n                ...it,\n                getAnimatableNone: (t1)=>{\n                    const e = t1.match(at);\n                    return e ? e.map(rt).join(\" \") : t1;\n                }\n            }, ut = {\n                ...L,\n                transform: Math.round\n            }, ct = {\n                borderWidth: z,\n                borderTopWidth: z,\n                borderRightWidth: z,\n                borderBottomWidth: z,\n                borderLeftWidth: z,\n                borderRadius: z,\n                radius: z,\n                borderTopLeftRadius: z,\n                borderTopRightRadius: z,\n                borderBottomRightRadius: z,\n                borderBottomLeftRadius: z,\n                width: z,\n                maxWidth: z,\n                height: z,\n                maxHeight: z,\n                size: z,\n                top: z,\n                right: z,\n                bottom: z,\n                left: z,\n                padding: z,\n                paddingTop: z,\n                paddingRight: z,\n                paddingBottom: z,\n                paddingLeft: z,\n                margin: z,\n                marginTop: z,\n                marginRight: z,\n                marginBottom: z,\n                marginLeft: z,\n                rotate: W,\n                rotateX: W,\n                rotateY: W,\n                rotateZ: W,\n                scale: B,\n                scaleX: B,\n                scaleY: B,\n                scaleZ: B,\n                skew: W,\n                skewX: W,\n                skewY: W,\n                distance: z,\n                translateX: z,\n                translateY: z,\n                translateZ: z,\n                x: z,\n                y: z,\n                z,\n                perspective: z,\n                transformPerspective: z,\n                opacity: j,\n                originX: G,\n                originY: G,\n                originZ: z,\n                zIndex: ut,\n                fillOpacity: j,\n                strokeOpacity: j,\n                numOctaves: ut\n            }, ht = {\n                ...ct,\n                color: Z,\n                backgroundColor: Z,\n                outlineColor: Z,\n                fill: Z,\n                stroke: Z,\n                borderColor: Z,\n                borderTopColor: Z,\n                borderRightColor: Z,\n                borderBottomColor: Z,\n                borderLeftColor: Z,\n                filter: lt,\n                WebkitFilter: lt\n            }, dt = (t1)=>ht[t1];\n            function mt(t1, e) {\n                let n = dt(t1);\n                return n !== lt && (n = it), n.getAnimatableNone ? n.getAnimatableNone(e) : void 0;\n            }\n            const pt = (t1)=>(e)=>e.test(t1), ft = [\n                L,\n                z,\n                H,\n                W,\n                X,\n                Y,\n                {\n                    test: (t1)=>\"auto\" === t1,\n                    parse: (t1)=>t1\n                }\n            ], gt = (t1)=>ft.find(pt(t1)), yt = [\n                ...ft,\n                Z,\n                it\n            ];\n            function vt(t1, e, n) {\n                let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, i = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};\n                return \"function\" == typeof e && (e = e(void 0 !== n ? n : t1.custom, s, i)), \"string\" == typeof e && (e = t1.variants && t1.variants[e]), \"function\" == typeof e && (e = e(void 0 !== n ? n : t1.custom, s, i)), e;\n            }\n            function xt(t1, e, n) {\n                const s = t1.getProps();\n                return vt(s, e, void 0 !== n ? n : s.custom, function(t1) {\n                    const e = {};\n                    return t1.values.forEach((t1, n)=>e[n] = t1.get()), e;\n                }(t1), function(t1) {\n                    const e = {};\n                    return t1.values.forEach((t1, n)=>e[n] = t1.getVelocity()), e;\n                }(t1));\n            }\n            function Pt(t1, e, n) {\n                t1.hasValue(e) ? t1.getValue(e).set(n) : t1.addValue(e, S(n));\n            }\n            function bt(t1, e) {\n                const n = xt(t1, e);\n                let { transitionEnd: s = {}, transition: i = {}, ...o } = n ? t1.makeTargetAnimatable(n, !1) : {};\n                o = {\n                    ...o,\n                    ...s\n                };\n                for(const e in o)Pt(t1, e, (r = o[e], c(r) ? r[r.length - 1] || 0 : r));\n                var r;\n            }\n            function Tt(t1, e) {\n                [\n                    ...e\n                ].reverse().forEach((n)=>{\n                    const s = t1.getVariant(n);\n                    s && bt(t1, s), t1.variantChildren && t1.variantChildren.forEach((t1)=>{\n                        Tt(t1, e);\n                    });\n                });\n            }\n            function St(t1, e) {\n                if (e) return (e[t1] || e.default || e).from;\n            }\n            const wt = [\n                \"transformPerspective\",\n                \"x\",\n                \"y\",\n                \"z\",\n                \"translateX\",\n                \"translateY\",\n                \"translateZ\",\n                \"scale\",\n                \"scaleX\",\n                \"scaleY\",\n                \"rotate\",\n                \"rotateX\",\n                \"rotateY\",\n                \"rotateZ\",\n                \"skew\",\n                \"skewX\",\n                \"skewY\"\n            ], Et = new Set(wt), At = (t1)=>t1.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase(), Vt = \"data-\" + At(\"framerAppearId\"), Ct = (t1)=>1e3 * t1, Mt = (t1)=>t1 / 1e3, Dt = (t1)=>Array.isArray(t1) && \"number\" == typeof t1[0];\n            function kt(t1) {\n                return Boolean(!t1 || \"string\" == typeof t1 && Lt[t1] || Dt(t1) || Array.isArray(t1) && t1.every(kt));\n            }\n            const Rt = (param)=>{\n                let [t1, e, n, s] = param;\n                return \"cubic-bezier(\".concat(t1, \", \").concat(e, \", \").concat(n, \", \").concat(s, \")\");\n            }, Lt = {\n                linear: \"linear\",\n                ease: \"ease\",\n                easeIn: \"ease-in\",\n                easeOut: \"ease-out\",\n                easeInOut: \"ease-in-out\",\n                circIn: Rt([\n                    0,\n                    .65,\n                    .55,\n                    1\n                ]),\n                circOut: Rt([\n                    .55,\n                    0,\n                    1,\n                    .45\n                ]),\n                backIn: Rt([\n                    .31,\n                    .01,\n                    .66,\n                    -.59\n                ]),\n                backOut: Rt([\n                    .33,\n                    1.53,\n                    .69,\n                    .99\n                ])\n            };\n            function jt(t1) {\n                if (t1) return Dt(t1) ? Rt(t1) : Array.isArray(t1) ? t1.map(jt) : Lt[t1];\n            }\n            const Bt = (t1, e, n)=>(((1 - 3 * n + 3 * e) * t1 + (3 * n - 6 * e)) * t1 + 3 * e) * t1;\n            function Ft(t1, e, s, i) {\n                if (t1 === e && s === i) return n;\n                return (n)=>0 === n || 1 === n ? n : Bt(function(t1, e, n, s, i) {\n                        let o, r, a = 0;\n                        do {\n                            r = e + (n - e) / 2, o = Bt(r, s, i) - t1, o > 0 ? n = r : e = r;\n                        }while (Math.abs(o) > 1e-7 && ++a < 12);\n                        return r;\n                    }(n, 0, 1, t1, s), e, i);\n            }\n            const Ot = Ft(.42, 0, 1, 1), It = Ft(0, 0, .58, 1), Ut = Ft(.42, 0, .58, 1), Nt = (t1)=>(e)=>e <= .5 ? t1(2 * e) / 2 : (2 - t1(2 * (1 - e))) / 2, $t = (t1)=>(e)=>1 - t1(1 - e), Wt = (t1)=>1 - Math.sin(Math.acos(t1)), Ht = $t(Wt), zt = Nt(Ht), Yt = Ft(.33, 1.53, .69, .99), Xt = $t(Yt), Gt = Nt(Xt), qt = {\n                linear: n,\n                easeIn: Ot,\n                easeInOut: Ut,\n                easeOut: It,\n                circIn: Wt,\n                circInOut: zt,\n                circOut: Ht,\n                backIn: Xt,\n                backInOut: Gt,\n                backOut: Yt,\n                anticipate: (t1)=>(t1 *= 2) < 1 ? .5 * Xt(t1) : .5 * (2 - Math.pow(2, -10 * (t1 - 1)))\n            }, Zt = (t1)=>{\n                if (Array.isArray(t1)) {\n                    r(4 === t1.length, \"Cubic bezier arrays must contain four numerical values.\");\n                    const [e, n, s, i] = t1;\n                    return Ft(e, n, s, i);\n                }\n                return \"string\" == typeof t1 ? (r(void 0 !== qt[t1], \"Invalid easing type '\".concat(t1, \"'\")), qt[t1]) : t1;\n            }, Kt = (t1, e, n)=>-n * t1 + n * e + t1;\n            function _t(t1, e, n) {\n                return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t1 + 6 * (e - t1) * n : n < .5 ? e : n < 2 / 3 ? t1 + (e - t1) * (2 / 3 - n) * 6 : t1;\n            }\n            const Jt = (t1, e, n)=>{\n                const s = t1 * t1;\n                return Math.sqrt(Math.max(0, n * (e * e - s) + s));\n            }, Qt = [\n                N,\n                U,\n                q\n            ];\n            function te(t1) {\n                const e = (n = t1, Qt.find((t1)=>t1.test(n)));\n                var n;\n                r(Boolean(e), \"'\".concat(t1, \"' is not an animatable color. Use the equivalent color code instead.\"));\n                let s = e.parse(t1);\n                return e === q && (s = function(param) {\n                    let { hue: t1, saturation: e, lightness: n, alpha: s } = param;\n                    t1 /= 360, n /= 100;\n                    let i = 0, o = 0, r = 0;\n                    if (e /= 100) {\n                        const s = n < .5 ? n * (1 + e) : n + e - n * e, a = 2 * n - s;\n                        i = _t(a, s, t1 + 1 / 3), o = _t(a, s, t1), r = _t(a, s, t1 - 1 / 3);\n                    } else i = o = r = n;\n                    return {\n                        red: Math.round(255 * i),\n                        green: Math.round(255 * o),\n                        blue: Math.round(255 * r),\n                        alpha: s\n                    };\n                }(s)), s;\n            }\n            const ee = (t1, e)=>{\n                const n = te(t1), s = te(e), i = {\n                    ...n\n                };\n                return (t1)=>(i.red = Jt(n.red, s.red, t1), i.green = Jt(n.green, s.green, t1), i.blue = Jt(n.blue, s.blue, t1), i.alpha = Kt(n.alpha, s.alpha, t1), U.transform(i));\n            }, ne = (t1, e)=>(n)=>e(t1(n)), se = function() {\n                for(var _len = arguments.length, t1 = new Array(_len), _key = 0; _key < _len; _key++){\n                    t1[_key] = arguments[_key];\n                }\n                return t1.reduce(ne);\n            }, ie = (t1, e)=>(n)=>\"\".concat(n > 0 ? e : t1);\n            function oe(t1, e) {\n                return \"number\" == typeof t1 ? (n)=>Kt(t1, e, n) : Z.test(t1) ? ee(t1, e) : t1.startsWith(\"var(\") ? ie(t1, e) : le(t1, e);\n            }\n            const re = (t1, e)=>{\n                const n = [\n                    ...t1\n                ], s = n.length, i = t1.map((t1, n)=>oe(t1, e[n]));\n                return (t1)=>{\n                    for(let e = 0; e < s; e++)n[e] = i[e](t1);\n                    return n;\n                };\n            }, ae = (t1, e)=>{\n                const n = {\n                    ...t1,\n                    ...e\n                }, s = {};\n                for(const i in n)void 0 !== t1[i] && void 0 !== e[i] && (s[i] = oe(t1[i], e[i]));\n                return (t1)=>{\n                    for(const e in s)n[e] = s[e](t1);\n                    return n;\n                };\n            }, le = (t1, e)=>{\n                const n = it.createTransformer(e), s = tt(t1), i = tt(e);\n                return s.numVars === i.numVars && s.numColors === i.numColors && s.numNumbers >= i.numNumbers ? se(re(s.values, i.values), n) : (o(!0, \"Complex values '\".concat(t1, \"' and '\").concat(e, \"' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.\")), ie(t1, e));\n            }, ue = (t1, e, n)=>{\n                const s = e - t1;\n                return 0 === s ? 1 : (n - t1) / s;\n            }, ce = (t1, e)=>(n)=>Kt(t1, e, n);\n            function he(t1, e) {\n                let { clamp: s = !0, ease: i, mixer: o } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                const a = t1.length;\n                if (r(a === e.length, \"Both input and output ranges must be the same length\"), 1 === a) return ()=>e[0];\n                t1[0] > t1[a - 1] && (t1 = [\n                    ...t1\n                ].reverse(), e = [\n                    ...e\n                ].reverse());\n                const l = function(t1, e, s) {\n                    const i = [], o = s || (\"number\" == typeof (r = t1[0]) ? ce : \"string\" == typeof r ? Z.test(r) ? ee : le : Array.isArray(r) ? re : \"object\" == typeof r ? ae : ce);\n                    var r;\n                    const a = t1.length - 1;\n                    for(let s = 0; s < a; s++){\n                        let r = o(t1[s], t1[s + 1]);\n                        if (e) {\n                            const t1 = Array.isArray(e) ? e[s] || n : e;\n                            r = se(t1, r);\n                        }\n                        i.push(r);\n                    }\n                    return i;\n                }(e, i, o), u = l.length, c = (e)=>{\n                    let n = 0;\n                    if (u > 1) for(; n < t1.length - 2 && !(e < t1[n + 1]); n++);\n                    const s = ue(t1[n], t1[n + 1], e);\n                    return l[n](s);\n                };\n                return s ? (e)=>c(R(t1[0], t1[a - 1], e)) : c;\n            }\n            function de(param) {\n                let { duration: t1 = 300, keyframes: e, times: n, ease: s = \"easeInOut\" } = param;\n                const i = ((t1)=>Array.isArray(t1) && \"number\" != typeof t1[0])(s) ? s.map(Zt) : Zt(s), o = {\n                    done: !1,\n                    value: e[0]\n                }, r = he(function(t1, e) {\n                    return t1.map((t1)=>t1 * e);\n                }(n && n.length === e.length ? n : function(t1) {\n                    const e = [\n                        0\n                    ];\n                    return function(t1, e) {\n                        const n = t1[t1.length - 1];\n                        for(let s = 1; s <= e; s++){\n                            const i = ue(0, e, s);\n                            t1.push(Kt(n, 1, i));\n                        }\n                    }(e, t1.length - 1), e;\n                }(e), t1), e, {\n                    ease: Array.isArray(i) ? i : (a = e, l = i, a.map(()=>l || Ut).splice(0, a.length - 1))\n                });\n                var a, l;\n                return {\n                    calculatedDuration: t1,\n                    next: (e)=>(o.value = r(e), o.done = e >= t1, o)\n                };\n            }\n            function me(t1, e, n) {\n                const s = Math.max(e - 5, 0);\n                return p(n - t1(s), e - s);\n            }\n            function pe(t1, e) {\n                return t1 * Math.sqrt(1 - e * e);\n            }\n            const fe = [\n                \"duration\",\n                \"bounce\"\n            ], ge = [\n                \"stiffness\",\n                \"damping\",\n                \"mass\"\n            ];\n            function ye(t1, e) {\n                return e.some((e)=>void 0 !== t1[e]);\n            }\n            function ve(param) {\n                let { keyframes: t1, restDelta: e, restSpeed: n, ...s } = param;\n                const i = t1[0], r = t1[t1.length - 1], a = {\n                    done: !1,\n                    value: i\n                }, { stiffness: l, damping: u, mass: c, velocity: h, duration: d, isResolvedFromDuration: m } = function(t1) {\n                    let e = {\n                        velocity: 0,\n                        stiffness: 100,\n                        damping: 10,\n                        mass: 1,\n                        isResolvedFromDuration: !1,\n                        ...t1\n                    };\n                    if (!ye(t1, ge) && ye(t1, fe)) {\n                        const n = function(param) {\n                            let { duration: t1 = 800, bounce: e = .25, velocity: n = 0, mass: s = 1 } = param;\n                            let i, r;\n                            o(t1 <= Ct(10), \"Spring duration must be 10 seconds or less\");\n                            let a = 1 - e;\n                            a = R(.05, 1, a), t1 = R(.01, 10, Mt(t1)), a < 1 ? (i = (e)=>{\n                                const s = e * a, i = s * t1;\n                                return .001 - (s - n) / pe(e, a) * Math.exp(-i);\n                            }, r = (e)=>{\n                                const s = e * a * t1, o = s * n + n, r = Math.pow(a, 2) * Math.pow(e, 2) * t1, l = Math.exp(-s), u = pe(Math.pow(e, 2), a);\n                                return (.001 - i(e) > 0 ? -1 : 1) * ((o - r) * l) / u;\n                            }) : (i = (e)=>Math.exp(-e * t1) * ((e - n) * t1 + 1) - .001, r = (e)=>Math.exp(-e * t1) * (t1 * t1 * (n - e)));\n                            const l = function(t1, e, n) {\n                                let s = n;\n                                for(let n = 1; n < 12; n++)s -= t1(s) / e(s);\n                                return s;\n                            }(i, r, 5 / t1);\n                            if (t1 = Ct(t1), isNaN(l)) return {\n                                stiffness: 100,\n                                damping: 10,\n                                duration: t1\n                            };\n                            {\n                                const e = Math.pow(l, 2) * s;\n                                return {\n                                    stiffness: e,\n                                    damping: 2 * a * Math.sqrt(s * e),\n                                    duration: t1\n                                };\n                            }\n                        }(t1);\n                        e = {\n                            ...e,\n                            ...n,\n                            velocity: 0,\n                            mass: 1\n                        }, e.isResolvedFromDuration = !0;\n                    }\n                    return e;\n                }(s), p = h ? -Mt(h) : 0, f = u / (2 * Math.sqrt(l * c)), g = r - i, y = Mt(Math.sqrt(l / c)), v = Math.abs(g) < 5;\n                let x;\n                if (n || (n = v ? .01 : 2), e || (e = v ? .005 : .5), f < 1) {\n                    const t1 = pe(y, f);\n                    x = (e)=>{\n                        const n = Math.exp(-f * y * e);\n                        return r - n * ((p + f * y * g) / t1 * Math.sin(t1 * e) + g * Math.cos(t1 * e));\n                    };\n                } else if (1 === f) x = (t1)=>r - Math.exp(-y * t1) * (g + (p + y * g) * t1);\n                else {\n                    const t1 = y * Math.sqrt(f * f - 1);\n                    x = (e)=>{\n                        const n = Math.exp(-f * y * e), s = Math.min(t1 * e, 300);\n                        return r - n * ((p + f * y * g) * Math.sinh(s) + t1 * g * Math.cosh(s)) / t1;\n                    };\n                }\n                return {\n                    calculatedDuration: m && d || null,\n                    next: (t1)=>{\n                        const s = x(t1);\n                        if (m) a.done = t1 >= d;\n                        else {\n                            let i = p;\n                            0 !== t1 && (i = f < 1 ? me(x, t1, s) : 0);\n                            const o = Math.abs(i) <= n, l = Math.abs(r - s) <= e;\n                            a.done = o && l;\n                        }\n                        return a.value = a.done ? r : s, a;\n                    }\n                };\n            }\n            function xe(param) {\n                let { keyframes: t1, velocity: e = 0, power: n = .8, timeConstant: s = 325, bounceDamping: i = 10, bounceStiffness: o = 500, modifyTarget: r, min: a, max: l, restDelta: u = .5, restSpeed: c } = param;\n                const h = t1[0], d = {\n                    done: !1,\n                    value: h\n                }, m = (t1)=>void 0 === a ? l : void 0 === l || Math.abs(a - t1) < Math.abs(l - t1) ? a : l;\n                let p = n * e;\n                const f = h + p, g = void 0 === r ? f : r(f);\n                g !== f && (p = g - h);\n                const y = (t1)=>-p * Math.exp(-t1 / s), v = (t1)=>g + y(t1), x = (t1)=>{\n                    const e = y(t1), n = v(t1);\n                    d.done = Math.abs(e) <= u, d.value = d.done ? g : n;\n                };\n                let P, b;\n                const T = (t1)=>{\n                    var e;\n                    e = d.value, (void 0 !== a && e < a || void 0 !== l && e > l) && (P = t1, b = ve({\n                        keyframes: [\n                            d.value,\n                            m(d.value)\n                        ],\n                        velocity: me(v, t1, d.value),\n                        damping: i,\n                        stiffness: o,\n                        restDelta: u,\n                        restSpeed: c\n                    }));\n                };\n                return T(0), {\n                    calculatedDuration: null,\n                    next: (t1)=>{\n                        let e = !1;\n                        return b || void 0 !== P || (e = !0, x(t1), T(t1)), void 0 !== P && t1 > P ? b.next(t1 - P) : (!e && x(t1), d);\n                    }\n                };\n            }\n            const Pe = (t1)=>{\n                const e = (param)=>{\n                    let { timestamp: e } = param;\n                    return t1(e);\n                };\n                return {\n                    start: ()=>y.update(e, !0),\n                    stop: ()=>v(e),\n                    now: ()=>x.isProcessing ? x.timestamp : performance.now()\n                };\n            };\n            function be(t1) {\n                let e = 0, n = t1.next(e);\n                for(; !n.done && e < 2e4;)e += 50, n = t1.next(e);\n                return e >= 2e4 ? 1 / 0 : e;\n            }\n            const Te = {\n                decay: xe,\n                inertia: xe,\n                tween: de,\n                keyframes: de,\n                spring: ve\n            };\n            function Se(param) {\n                let { autoplay: t1 = !0, delay: e = 0, driver: n = Pe, keyframes: s, type: i = \"keyframes\", repeat: o = 0, repeatDelay: r = 0, repeatType: a = \"loop\", onPlay: l, onStop: u, onComplete: c, onUpdate: h, ...d } = param;\n                let m, p, f = 1, g = !1;\n                const y = ()=>{\n                    p = new Promise((t1)=>{\n                        m = t1;\n                    });\n                };\n                let v;\n                y();\n                const x = Te[i] || de;\n                let P;\n                x !== de && \"number\" != typeof s[0] && (P = he([\n                    0,\n                    100\n                ], s, {\n                    clamp: !1\n                }), s = [\n                    0,\n                    100\n                ]);\n                const b = x({\n                    ...d,\n                    keyframes: s\n                });\n                let T;\n                \"mirror\" === a && (T = x({\n                    ...d,\n                    keyframes: [\n                        ...s\n                    ].reverse(),\n                    velocity: -(d.velocity || 0)\n                }));\n                let S = \"idle\", w = null, E = null, A = null;\n                null === b.calculatedDuration && o && (b.calculatedDuration = be(b));\n                const { calculatedDuration: V } = b;\n                let C = 1 / 0, M = 1 / 0;\n                null !== V && (C = V + r, M = C * (o + 1) - r);\n                let D = 0;\n                const k = (t1)=>{\n                    if (null === E) return;\n                    f > 0 && (E = Math.min(E, t1)), f < 0 && (E = Math.min(t1 - M / f, E)), D = null !== w ? w : Math.round(t1 - E) * f;\n                    const n = D - e * (f >= 0 ? 1 : -1), i = f >= 0 ? n < 0 : n > M;\n                    D = Math.max(n, 0), \"finished\" === S && null === w && (D = M);\n                    let l = D, u = b;\n                    if (o) {\n                        const t1 = D / C;\n                        let e = Math.floor(t1), n = t1 % 1;\n                        !n && t1 >= 1 && (n = 1), 1 === n && e--, e = Math.min(e, o + 1);\n                        const s = Boolean(e % 2);\n                        s && (\"reverse\" === a ? (n = 1 - n, r && (n -= r / C)) : \"mirror\" === a && (u = T));\n                        let i = R(0, 1, n);\n                        D > M && (i = \"reverse\" === a && s ? 1 : 0), l = i * C;\n                    }\n                    const c = i ? {\n                        done: !1,\n                        value: s[0]\n                    } : u.next(l);\n                    P && (c.value = P(c.value));\n                    let { done: d } = c;\n                    i || null === V || (d = f >= 0 ? D >= M : D <= 0);\n                    const m = null === w && (\"finished\" === S || \"running\" === S && d);\n                    return h && h(c.value), m && B(), c;\n                }, L = ()=>{\n                    v && v.stop(), v = void 0;\n                }, j = ()=>{\n                    S = \"idle\", L(), m(), y(), E = A = null;\n                }, B = ()=>{\n                    S = \"finished\", c && c(), L(), m();\n                }, F = ()=>{\n                    if (g) return;\n                    v || (v = n(k));\n                    const t1 = v.now();\n                    l && l(), null !== w ? E = t1 - w : E && \"finished\" !== S || (E = t1), \"finished\" === S && y(), A = E, w = null, S = \"running\", v.start();\n                };\n                t1 && F();\n                const O = {\n                    then: (t1, e)=>p.then(t1, e),\n                    get time () {\n                        return Mt(D);\n                    },\n                    set time (t){\n                        t = Ct(t), D = t, null === w && v && 0 !== f ? E = v.now() - t / f : w = t;\n                    },\n                    get duration () {\n                        const t1 = null === b.calculatedDuration ? be(b) : b.calculatedDuration;\n                        return Mt(t1);\n                    },\n                    get speed () {\n                        return f;\n                    },\n                    set speed (t){\n                        t !== f && v && (f = t, O.time = Mt(D));\n                    },\n                    get state () {\n                        return S;\n                    },\n                    play: F,\n                    pause: ()=>{\n                        S = \"paused\", w = D;\n                    },\n                    stop: ()=>{\n                        g = !0, \"idle\" !== S && (S = \"idle\", u && u(), j());\n                    },\n                    cancel: ()=>{\n                        null !== A && k(A), j();\n                    },\n                    complete: ()=>{\n                        S = \"finished\";\n                    },\n                    sample: (t1)=>(E = 0, k(t1))\n                };\n                return O;\n            }\n            const we = function(t1) {\n                let e;\n                return ()=>(void 0 === e && (e = Object.hasOwnProperty.call(Element.prototype, \"animate\")), e);\n            }(), Ee = new Set([\n                \"opacity\",\n                \"clipPath\",\n                \"filter\",\n                \"transform\",\n                \"backgroundColor\"\n            ]);\n            const Ae = {\n                type: \"spring\",\n                stiffness: 500,\n                damping: 25,\n                restSpeed: 10\n            }, Ve = {\n                type: \"keyframes\",\n                duration: .8\n            }, Ce = {\n                type: \"keyframes\",\n                ease: [\n                    .25,\n                    .1,\n                    .35,\n                    1\n                ],\n                duration: .3\n            }, Me = (t1, param)=>{\n                let { keyframes: e } = param;\n                return e.length > 2 ? Ve : Et.has(t1) ? t1.startsWith(\"scale\") ? {\n                    type: \"spring\",\n                    stiffness: 550,\n                    damping: 0 === e[1] ? 2 * Math.sqrt(550) : 30,\n                    restSpeed: 10\n                } : Ae : Ce;\n            }, De = (t1, e)=>!(\"zIndex\" === t1 || \"number\" != typeof e && !Array.isArray(e) && (\"string\" != typeof e || !it.test(e) && \"0\" !== e || e.startsWith(\"url(\")));\n            function ke(t1) {\n                return \"number\" == typeof t1 ? 0 === t1 : null !== t1 ? \"none\" === t1 || \"0\" === t1 || u(t1) : void 0;\n            }\n            function Re(t1, e) {\n                return t1[e] || t1.default || t1;\n            }\n            const Le = function(t1, e, s) {\n                let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n                return (r)=>{\n                    const a = Re(i, t1) || {}, l = a.delay || i.delay || 0;\n                    let { elapsed: u = 0 } = i;\n                    u -= Ct(l);\n                    const c = function(t1, e, n, s) {\n                        const i = De(e, n);\n                        let o;\n                        o = Array.isArray(n) ? [\n                            ...n\n                        ] : [\n                            null,\n                            n\n                        ];\n                        const r = void 0 !== s.from ? s.from : t1.get();\n                        let a;\n                        const l = [];\n                        for(let t1 = 0; t1 < o.length; t1++)null === o[t1] && (o[t1] = 0 === t1 ? r : o[t1 - 1]), ke(o[t1]) && l.push(t1), \"string\" == typeof o[t1] && \"none\" !== o[t1] && \"0\" !== o[t1] && (a = o[t1]);\n                        if (i && l.length && a) for(let t1 = 0; t1 < l.length; t1++)o[l[t1]] = mt(e, a);\n                        return o;\n                    }(e, t1, s, a), h = c[0], d = c[c.length - 1], m = De(t1, h), p = De(t1, d);\n                    o(m === p, \"You are trying to animate \".concat(t1, ' from \"').concat(h, '\" to \"').concat(d, '\". ').concat(h, \" is not an animatable value - to enable this animation set \").concat(h, \" to a value animatable to \").concat(d, \" via the `style` property.\"));\n                    let f = {\n                        keyframes: c,\n                        velocity: e.getVelocity(),\n                        ease: \"easeOut\",\n                        ...a,\n                        delay: -u,\n                        onUpdate: (t1)=>{\n                            e.set(t1), a.onUpdate && a.onUpdate(t1);\n                        },\n                        onComplete: ()=>{\n                            r(), a.onComplete && a.onComplete();\n                        }\n                    };\n                    if (function(param) {\n                        let { when: t1, delay: e, delayChildren: n, staggerChildren: s, staggerDirection: i, repeat: o, repeatType: r, repeatDelay: a, from: l, elapsed: u, ...c } = param;\n                        return !!Object.keys(c).length;\n                    }(a) || (f = {\n                        ...f,\n                        ...Me(t1, f)\n                    }), f.duration && (f.duration = Ct(f.duration)), f.repeatDelay && (f.repeatDelay = Ct(f.repeatDelay)), !m || !p || !1 === a.type) return function(param) {\n                        let { keyframes: t1, delay: e, onUpdate: s, onComplete: i } = param;\n                        const o = ()=>(s && s(t1[t1.length - 1]), i && i(), {\n                                time: 0,\n                                speed: 1,\n                                duration: 0,\n                                play: n,\n                                pause: n,\n                                stop: n,\n                                then: (t1)=>(t1(), Promise.resolve()),\n                                cancel: n,\n                                complete: n\n                            });\n                        return e ? Se({\n                            keyframes: [\n                                0,\n                                1\n                            ],\n                            duration: 0,\n                            delay: e,\n                            onComplete: o\n                        }) : o();\n                    }(f);\n                    if (e.owner && e.owner.current instanceof HTMLElement && !e.owner.getProps().onUpdate) {\n                        const s = function(t1, e, param) {\n                            let { onUpdate: s, onComplete: i, ...o } = param;\n                            if (!we() || !Ee.has(e) || o.repeatDelay || \"mirror\" === o.repeatType || 0 === o.damping || \"inertia\" === o.type) return !1;\n                            let r, a, l = !1;\n                            const u = ()=>{\n                                a = new Promise((t1)=>{\n                                    r = t1;\n                                });\n                            };\n                            u();\n                            let { keyframes: c, duration: h = 300, ease: d, times: m } = o;\n                            if (((t1, e)=>\"spring\" === e.type || \"backgroundColor\" === t1 || !kt(e.ease))(e, o)) {\n                                const t1 = Se({\n                                    ...o,\n                                    repeat: 0,\n                                    delay: 0\n                                });\n                                let e = {\n                                    done: !1,\n                                    value: c[0]\n                                };\n                                const n = [];\n                                let s = 0;\n                                for(; !e.done && s < 2e4;)e = t1.sample(s), n.push(e.value), s += 10;\n                                m = void 0, c = n, h = s - 10, d = \"linear\";\n                            }\n                            const p = function(t1, e, n) {\n                                let { delay: s = 0, duration: i, repeat: o = 0, repeatType: r = \"loop\", ease: a, times: l } = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n                                const u = {\n                                    [e]: n\n                                };\n                                l && (u.offset = l);\n                                const c = jt(a);\n                                return Array.isArray(c) && (u.easing = c), t1.animate(u, {\n                                    delay: s,\n                                    duration: i,\n                                    easing: Array.isArray(c) ? \"linear\" : c,\n                                    fill: \"both\",\n                                    iterations: o + 1,\n                                    direction: \"reverse\" === r ? \"alternate\" : \"normal\"\n                                });\n                            }(t1.owner.current, e, c, {\n                                ...o,\n                                duration: h,\n                                ease: d,\n                                times: m\n                            });\n                            o.syncStart && (p.startTime = x.isProcessing ? x.timestamp : document.timeline ? document.timeline.currentTime : performance.now());\n                            const f = ()=>p.cancel(), g = ()=>{\n                                y.update(f), r(), u();\n                            };\n                            return p.onfinish = ()=>{\n                                t1.set(function(t1, param) {\n                                    let { repeat: e, repeatType: n = \"loop\" } = param;\n                                    return t1[e && \"loop\" !== n && e % 2 == 1 ? 0 : t1.length - 1];\n                                }(c, o)), i && i(), g();\n                            }, {\n                                then: (t1, e)=>a.then(t1, e),\n                                attachTimeline: (t1)=>(p.timeline = t1, p.onfinish = null, n),\n                                get time () {\n                                    return Mt(p.currentTime || 0);\n                                },\n                                set time (t){\n                                    p.currentTime = Ct(t);\n                                },\n                                get speed () {\n                                    return p.playbackRate;\n                                },\n                                set speed (t){\n                                    p.playbackRate = t;\n                                },\n                                get duration () {\n                                    return Mt(h);\n                                },\n                                play: ()=>{\n                                    l || (p.play(), v(f));\n                                },\n                                pause: ()=>p.pause(),\n                                stop: ()=>{\n                                    if (l = !0, \"idle\" === p.playState) return;\n                                    const { currentTime: e } = p;\n                                    if (e) {\n                                        const n = Se({\n                                            ...o,\n                                            autoplay: !1\n                                        });\n                                        t1.setWithVelocity(n.sample(e - 10).value, n.sample(e).value, 10);\n                                    }\n                                    g();\n                                },\n                                complete: ()=>p.finish(),\n                                cancel: g\n                            };\n                        }(e, t1, f);\n                        if (s) return s;\n                    }\n                    return Se(f);\n                };\n            }, je = (t1)=>Boolean(t1 && t1.getVelocity);\n            function Be(t1) {\n                return Boolean(je(t1) && t1.add);\n            }\n            function Fe(param, n) {\n                let { protectedKeys: t1, needsAnimating: e } = param;\n                const s = t1.hasOwnProperty(n) && !0 !== e[n];\n                return e[n] = !1, s;\n            }\n            function Oe(t1, e) {\n                let { delay: n = 0, transitionOverride: s, type: i } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                let { transition: o = t1.getDefaultTransition(), transitionEnd: r, ...a } = t1.makeTargetAnimatable(e);\n                const l = t1.getValue(\"willChange\");\n                s && (o = s);\n                const u = [], c = i && t1.animationState && t1.animationState.getState()[i];\n                for(const e in a){\n                    const s = t1.getValue(e), i = a[e];\n                    if (!s || void 0 === i || c && Fe(c, e)) continue;\n                    const r = {\n                        delay: n,\n                        elapsed: 0,\n                        ...o\n                    };\n                    if (window.HandoffAppearAnimations && !s.hasAnimated) {\n                        const n = t1.getProps()[Vt];\n                        n && (r.elapsed = window.HandoffAppearAnimations(n, e, s, y), r.syncStart = !0);\n                    }\n                    s.start(Le(e, s, i, t1.shouldReduceMotion && Et.has(e) ? {\n                        type: !1\n                    } : r));\n                    const h = s.animation;\n                    Be(l) && (l.add(e), h.then(()=>l.remove(e))), u.push(h);\n                }\n                return r && Promise.all(u).then(()=>{\n                    r && bt(t1, r);\n                }), u;\n            }\n            function Ie(t1, e) {\n                let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                const s = xt(t1, e, n.custom);\n                let { transition: i = t1.getDefaultTransition() || {} } = s || {};\n                n.transitionOverride && (i = n.transitionOverride);\n                const o = s ? ()=>Promise.all(Oe(t1, s, n)) : ()=>Promise.resolve(), r = t1.variantChildren && t1.variantChildren.size ? function() {\n                    let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n                    const { delayChildren: o = 0, staggerChildren: r, staggerDirection: a } = i;\n                    return function(t1, e) {\n                        let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, i = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1, o = arguments.length > 5 ? arguments[5] : void 0;\n                        const r = [], a = (t1.variantChildren.size - 1) * s, l = 1 === i ? function() {\n                            let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n                            return t1 * s;\n                        } : function() {\n                            let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n                            return a - t1 * s;\n                        };\n                        return Array.from(t1.variantChildren).sort(Ue).forEach((t1, s)=>{\n                            t1.notify(\"AnimationStart\", e), r.push(Ie(t1, e, {\n                                ...o,\n                                delay: n + l(s)\n                            }).then(()=>t1.notify(\"AnimationComplete\", e)));\n                        }), Promise.all(r);\n                    }(t1, e, o + s, r, a, n);\n                } : ()=>Promise.resolve(), { when: a } = i;\n                if (a) {\n                    const [t1, e] = \"beforeChildren\" === a ? [\n                        o,\n                        r\n                    ] : [\n                        r,\n                        o\n                    ];\n                    return t1().then(()=>e());\n                }\n                return Promise.all([\n                    o(),\n                    r(n.delay)\n                ]);\n            }\n            function Ue(t1, e) {\n                return t1.sortNodePosition(e);\n            }\n            function Ne(t1, e) {\n                let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                let s;\n                if (t1.notify(\"AnimationStart\", e), Array.isArray(e)) {\n                    const i = e.map((e)=>Ie(t1, e, n));\n                    s = Promise.all(i);\n                } else if (\"string\" == typeof e) s = Ie(t1, e, n);\n                else {\n                    const i = \"function\" == typeof e ? xt(t1, e, n.custom) : e;\n                    s = Promise.all(Oe(t1, i, n));\n                }\n                return s.then(()=>t1.notify(\"AnimationComplete\", e));\n            }\n            function $e() {\n                let t1 = !1;\n                const e = new Set, n = {\n                    subscribe: (t1)=>(e.add(t1), ()=>{\n                            e.delete(t1);\n                        }),\n                    start (n, s) {\n                        r(t1, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n                        const i = [];\n                        return e.forEach((t1)=>{\n                            i.push(Ne(t1, n, {\n                                transitionOverride: s\n                            }));\n                        }), Promise.all(i);\n                    },\n                    set: (n)=>(r(t1, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\"), e.forEach((t1)=>{\n                            !function(t1, e) {\n                                Array.isArray(e) ? Tt(t1, e) : \"string\" == typeof e ? Tt(t1, [\n                                    e\n                                ]) : bt(t1, e);\n                            }(t1, n);\n                        })),\n                    stop () {\n                        e.forEach((t1)=>{\n                            !function(t1) {\n                                t1.values.forEach((t1)=>t1.stop());\n                            }(t1);\n                        });\n                    },\n                    mount: ()=>(t1 = !0, ()=>{\n                            t1 = !1, n.stop();\n                        })\n                };\n                return n;\n            }\n            function We(e) {\n                const n = (0, t1.useRef)(null);\n                return null === n.current && (n.current = e()), n.current;\n            }\n            const He = \"undefined\" != typeof document, ze = He ? t1.useLayoutEffect : t1.useEffect, Ye = (0, t1.createContext)({\n                transformPagePoint: (t1)=>t1,\n                isStatic: !1,\n                reducedMotion: \"never\"\n            }), Xe = (0, t1.createContext)({}), Ge = (0, t1.createContext)(null), qe = (0, t1.createContext)({\n                strict: !1\n            });\n            function Ze(t1) {\n                return \"object\" == typeof t1 && Object.prototype.hasOwnProperty.call(t1, \"current\");\n            }\n            function Ke(t1) {\n                return \"string\" == typeof t1 || Array.isArray(t1);\n            }\n            function _e(t1) {\n                return \"object\" == typeof t1 && \"function\" == typeof t1.start;\n            }\n            const Je = [\n                \"animate\",\n                \"whileInView\",\n                \"whileFocus\",\n                \"whileHover\",\n                \"whileTap\",\n                \"whileDrag\",\n                \"exit\"\n            ], Qe = [\n                \"initial\",\n                ...Je\n            ];\n            function tn(t1) {\n                return _e(t1.animate) || Qe.some((e)=>Ke(t1[e]));\n            }\n            function en(t1) {\n                return Boolean(tn(t1) || t1.variants);\n            }\n            function nn(t1) {\n                return Array.isArray(t1) ? t1.join(\" \") : t1;\n            }\n            const sn = {\n                animation: [\n                    \"animate\",\n                    \"variants\",\n                    \"whileHover\",\n                    \"whileTap\",\n                    \"exit\",\n                    \"whileInView\",\n                    \"whileFocus\",\n                    \"whileDrag\"\n                ],\n                exit: [\n                    \"exit\"\n                ],\n                drag: [\n                    \"drag\",\n                    \"dragControls\"\n                ],\n                focus: [\n                    \"whileFocus\"\n                ],\n                hover: [\n                    \"whileHover\",\n                    \"onHoverStart\",\n                    \"onHoverEnd\"\n                ],\n                tap: [\n                    \"whileTap\",\n                    \"onTap\",\n                    \"onTapStart\",\n                    \"onTapCancel\"\n                ],\n                pan: [\n                    \"onPan\",\n                    \"onPanStart\",\n                    \"onPanSessionStart\",\n                    \"onPanEnd\"\n                ],\n                inView: [\n                    \"whileInView\",\n                    \"onViewportEnter\",\n                    \"onViewportLeave\"\n                ],\n                layout: [\n                    \"layout\",\n                    \"layoutId\"\n                ]\n            }, on = {};\n            for(const t1 in sn)on[t1] = {\n                isEnabled: (e)=>sn[t1].some((t1)=>!!e[t1])\n            };\n            const rn = (0, t1.createContext)({}), an = (0, t1.createContext)({}), ln = Symbol.for(\"motionComponentSymbol\");\n            function un(param) {\n                let { preloadedFeatures: e, createVisualElement: n, useRender: s, useVisualState: i, Component: o } = param;\n                e && function(t1) {\n                    for(const e in t1)on[e] = {\n                        ...on[e],\n                        ...t1[e]\n                    };\n                }(e);\n                const r = (0, t1.forwardRef)(function(r, a) {\n                    let l;\n                    const u = {\n                        ...(0, t1.useContext)(Ye),\n                        ...r,\n                        layoutId: cn(r)\n                    }, { isStatic: c } = u, h = function(e) {\n                        const { initial: n, animate: s } = function(t1, e) {\n                            if (tn(t1)) {\n                                const { initial: e, animate: n } = t1;\n                                return {\n                                    initial: !1 === e || Ke(e) ? e : void 0,\n                                    animate: Ke(n) ? n : void 0\n                                };\n                            }\n                            return !1 !== t1.inherit ? e : {};\n                        }(e, (0, t1.useContext)(Xe));\n                        return (0, t1.useMemo)(()=>({\n                                initial: n,\n                                animate: s\n                            }), [\n                            nn(n),\n                            nn(s)\n                        ]);\n                    }(r), d = i(r, c);\n                    if (!c && He) {\n                        h.visualElement = function(e, n, s, i) {\n                            const { visualElement: o } = (0, t1.useContext)(Xe), r = (0, t1.useContext)(qe), a = (0, t1.useContext)(Ge), l = (0, t1.useContext)(Ye).reducedMotion, u = (0, t1.useRef)();\n                            i = i || r.renderer, !u.current && i && (u.current = i(e, {\n                                visualState: n,\n                                parent: o,\n                                props: s,\n                                presenceContext: a,\n                                blockInitialAnimation: !!a && !1 === a.initial,\n                                reducedMotionConfig: l\n                            }));\n                            const c = u.current;\n                            (0, t1.useInsertionEffect)(()=>{\n                                c && c.update(s, a);\n                            });\n                            const h = (0, t1.useRef)(Boolean(window.HandoffAppearAnimations));\n                            return ze(()=>{\n                                c && (c.render(), h.current && c.animationState && c.animationState.animateChanges());\n                            }), (0, t1.useEffect)(()=>{\n                                c && (c.updateFeatures(), !h.current && c.animationState && c.animationState.animateChanges(), window.HandoffAppearAnimations = void 0, h.current = !1);\n                            }), c;\n                        }(o, d, u, n);\n                        const s = (0, t1.useContext)(an), i = (0, t1.useContext)(qe).strict;\n                        h.visualElement && (l = h.visualElement.loadFeatures(u, i, e, s));\n                    }\n                    return t1.createElement(Xe.Provider, {\n                        value: h\n                    }, l && h.visualElement ? t1.createElement(l, {\n                        visualElement: h.visualElement,\n                        ...u\n                    }) : null, s(o, r, function(e, n, s) {\n                        return (0, t1.useCallback)((t1)=>{\n                            t1 && e.mount && e.mount(t1), n && (t1 ? n.mount(t1) : n.unmount()), s && (\"function\" == typeof s ? s(t1) : Ze(s) && (s.current = t1));\n                        }, [\n                            n\n                        ]);\n                    }(d, h.visualElement, a), d, c, h.visualElement));\n                });\n                return r[ln] = o, r;\n            }\n            function cn(param) {\n                let { layoutId: e } = param;\n                const n = (0, t1.useContext)(rn).id;\n                return n && void 0 !== e ? n + \"-\" + e : e;\n            }\n            function hn(t1) {\n                function e(e) {\n                    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                    return un(t1(e, n));\n                }\n                if (\"undefined\" == typeof Proxy) return e;\n                const n = new Map;\n                return new Proxy(e, {\n                    get: (t1, s)=>(n.has(s) || n.set(s, e(s)), n.get(s))\n                });\n            }\n            const dn = [\n                \"animate\",\n                \"circle\",\n                \"defs\",\n                \"desc\",\n                \"ellipse\",\n                \"g\",\n                \"image\",\n                \"line\",\n                \"filter\",\n                \"marker\",\n                \"mask\",\n                \"metadata\",\n                \"path\",\n                \"pattern\",\n                \"polygon\",\n                \"polyline\",\n                \"rect\",\n                \"stop\",\n                \"switch\",\n                \"symbol\",\n                \"svg\",\n                \"text\",\n                \"tspan\",\n                \"use\",\n                \"view\"\n            ];\n            function mn(t1) {\n                return \"string\" == typeof t1 && !t1.includes(\"-\") && !!(dn.indexOf(t1) > -1 || /[A-Z]/.test(t1));\n            }\n            const pn = {};\n            function fn(t1, param) {\n                let { layout: e, layoutId: n } = param;\n                return Et.has(t1) || t1.startsWith(\"origin\") || (e || void 0 !== n) && (!!pn[t1] || \"opacity\" === t1);\n            }\n            const gn = {\n                x: \"translateX\",\n                y: \"translateY\",\n                z: \"translateZ\",\n                transformPerspective: \"perspective\"\n            }, yn = wt.length, vn = (t1, e)=>e && \"number\" == typeof t1 ? e.transform(t1) : t1;\n            function xn(t1, e, n, s) {\n                const { style: i, vars: o, transform: r, transformOrigin: a } = t1;\n                let l = !1, u = !1, c = !0;\n                for(const t1 in e){\n                    const n = e[t1];\n                    if (E(t1)) {\n                        o[t1] = n;\n                        continue;\n                    }\n                    const s = ct[t1], h = vn(n, s);\n                    if (Et.has(t1)) {\n                        if (l = !0, r[t1] = h, !c) continue;\n                        n !== (s.default || 0) && (c = !1);\n                    } else t1.startsWith(\"origin\") ? (u = !0, a[t1] = h) : i[t1] = h;\n                }\n                if (e.transform || (l || s ? i.transform = function(t1, param, s, i) {\n                    let { enableHardwareAcceleration: e = !0, allowTransformNone: n = !0 } = param;\n                    let o = \"\";\n                    for(let e = 0; e < yn; e++){\n                        const n = wt[e];\n                        void 0 !== t1[n] && (o += \"\".concat(gn[n] || n, \"(\").concat(t1[n], \") \"));\n                    }\n                    return e && !t1.z && (o += \"translateZ(0)\"), o = o.trim(), i ? o = i(t1, s ? \"\" : o) : n && s && (o = \"none\"), o;\n                }(t1.transform, n, c, s) : i.transform && (i.transform = \"none\")), u) {\n                    const { originX: t1 = \"50%\", originY: e = \"50%\", originZ: n = 0 } = a;\n                    i.transformOrigin = \"\".concat(t1, \" \").concat(e, \" \").concat(n);\n                }\n            }\n            function Pn(t1, e, n) {\n                for(const s in e)je(e[s]) || fn(s, n) || (t1[s] = e[s]);\n            }\n            function bn(e, n, s) {\n                const i = {}, o = function(e, n, s) {\n                    const i = {};\n                    return Pn(i, e.style || {}, e), Object.assign(i, function(param, n, s) {\n                        let { transformTemplate: e } = param;\n                        return (0, t1.useMemo)(()=>{\n                            const t1 = {\n                                style: {},\n                                transform: {},\n                                transformOrigin: {},\n                                vars: {}\n                            };\n                            return xn(t1, n, {\n                                enableHardwareAcceleration: !s\n                            }, e), Object.assign({}, t1.vars, t1.style);\n                        }, [\n                            n\n                        ]);\n                    }(e, n, s)), e.transformValues ? e.transformValues(i) : i;\n                }(e, n, s);\n                return e.drag && !1 !== e.dragListener && (i.draggable = !1, o.userSelect = o.WebkitUserSelect = o.WebkitTouchCallout = \"none\", o.touchAction = !0 === e.drag ? \"none\" : \"pan-\" + (\"x\" === e.drag ? \"y\" : \"x\")), void 0 === e.tabIndex && (e.onTap || e.onTapStart || e.whileTap) && (i.tabIndex = 0), i.style = o, i;\n            }\n            const Tn = new Set([\n                \"animate\",\n                \"exit\",\n                \"variants\",\n                \"initial\",\n                \"style\",\n                \"values\",\n                \"variants\",\n                \"transition\",\n                \"transformTemplate\",\n                \"transformValues\",\n                \"custom\",\n                \"inherit\",\n                \"onLayoutAnimationStart\",\n                \"onLayoutAnimationComplete\",\n                \"onLayoutMeasure\",\n                \"onBeforeLayoutMeasure\",\n                \"onAnimationStart\",\n                \"onAnimationComplete\",\n                \"onUpdate\",\n                \"onDragStart\",\n                \"onDrag\",\n                \"onDragEnd\",\n                \"onMeasureDragConstraints\",\n                \"onDirectionLock\",\n                \"onDragTransitionEnd\",\n                \"_dragX\",\n                \"_dragY\",\n                \"onHoverStart\",\n                \"onHoverEnd\",\n                \"onViewportEnter\",\n                \"onViewportLeave\",\n                \"ignoreStrict\",\n                \"viewport\"\n            ]);\n            function Sn(t1) {\n                return t1.startsWith(\"while\") || t1.startsWith(\"drag\") && \"draggable\" !== t1 || t1.startsWith(\"layout\") || t1.startsWith(\"onTap\") || t1.startsWith(\"onPan\") || Tn.has(t1);\n            }\n            let wn = (t1)=>!Sn(t1);\n            try {\n                (En = (__webpack_require__(/*! @emotion/is-prop-valid */ \"(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js\")[\"default\"])) && (wn = (t1)=>t1.startsWith(\"on\") ? !Sn(t1) : En(t1));\n            } catch (t1) {}\n            var En;\n            function An(t1, e, n) {\n                return \"string\" == typeof t1 ? t1 : z.transform(e + n * t1);\n            }\n            const Vn = {\n                offset: \"stroke-dashoffset\",\n                array: \"stroke-dasharray\"\n            }, Cn = {\n                offset: \"strokeDashoffset\",\n                array: \"strokeDasharray\"\n            };\n            function Mn(t1, param, c, h, d) {\n                let { attrX: e, attrY: n, attrScale: s, originX: i, originY: o, pathLength: r, pathSpacing: a = 1, pathOffset: l = 0, ...u } = param;\n                if (xn(t1, u, c, d), h) return void (t1.style.viewBox && (t1.attrs.viewBox = t1.style.viewBox));\n                t1.attrs = t1.style, t1.style = {};\n                const { attrs: m, style: p, dimensions: f } = t1;\n                m.transform && (f && (p.transform = m.transform), delete m.transform), f && (void 0 !== i || void 0 !== o || p.transform) && (p.transformOrigin = function(t1, e, n) {\n                    return \"\".concat(An(e, t1.x, t1.width), \" \").concat(An(n, t1.y, t1.height));\n                }(f, void 0 !== i ? i : .5, void 0 !== o ? o : .5)), void 0 !== e && (m.x = e), void 0 !== n && (m.y = n), void 0 !== s && (m.scale = s), void 0 !== r && function(t1, e) {\n                    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, i = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0;\n                    t1.pathLength = 1;\n                    const o = i ? Vn : Cn;\n                    t1[o.offset] = z.transform(-s);\n                    const r = z.transform(e), a = z.transform(n);\n                    t1[o.array] = \"\".concat(r, \" \").concat(a);\n                }(m, r, a, l, !1);\n            }\n            const Dn = (t1)=>\"string\" == typeof t1 && \"svg\" === t1.toLowerCase();\n            function kn(e, n, s, i) {\n                const o = (0, t1.useMemo)(()=>{\n                    const t1 = {\n                        style: {},\n                        transform: {},\n                        transformOrigin: {},\n                        vars: {},\n                        attrs: {}\n                    };\n                    return Mn(t1, n, {\n                        enableHardwareAcceleration: !1\n                    }, Dn(i), e.transformTemplate), {\n                        ...t1.attrs,\n                        style: {\n                            ...t1.style\n                        }\n                    };\n                }, [\n                    n\n                ]);\n                if (e.style) {\n                    const t1 = {};\n                    Pn(t1, e.style, e), o.style = {\n                        ...t1,\n                        ...o.style\n                    };\n                }\n                return o;\n            }\n            function Rn() {\n                let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n                return (n, s, i, param, r)=>{\n                    let { latestValues: o } = param;\n                    const a = (mn(n) ? kn : bn)(s, o, r, n), l = {\n                        ...function(t1, e, n) {\n                            const s = {};\n                            for(const i in t1)\"values\" === i && \"object\" == typeof t1.values || (wn(i) || !0 === n && Sn(i) || !e && !Sn(i) || t1.draggable && i.startsWith(\"onDrag\")) && (s[i] = t1[i]);\n                            return s;\n                        }(s, \"string\" == typeof n, e),\n                        ...a,\n                        ref: i\n                    }, { children: u } = s, c = (0, t1.useMemo)(()=>je(u) ? u.get() : u, [\n                        u\n                    ]);\n                    return (0, t1.createElement)(n, {\n                        ...l,\n                        children: c\n                    });\n                };\n            }\n            function Ln(t1, param, s, i) {\n                let { style: e, vars: n } = param;\n                Object.assign(t1.style, e, i && i.getProjectionStyles(s));\n                for(const e in n)t1.style.setProperty(e, n[e]);\n            }\n            const jn = new Set([\n                \"baseFrequency\",\n                \"diffuseConstant\",\n                \"kernelMatrix\",\n                \"kernelUnitLength\",\n                \"keySplines\",\n                \"keyTimes\",\n                \"limitingConeAngle\",\n                \"markerHeight\",\n                \"markerWidth\",\n                \"numOctaves\",\n                \"targetX\",\n                \"targetY\",\n                \"surfaceScale\",\n                \"specularConstant\",\n                \"specularExponent\",\n                \"stdDeviation\",\n                \"tableValues\",\n                \"viewBox\",\n                \"gradientTransform\",\n                \"pathLength\",\n                \"startOffset\",\n                \"textLength\",\n                \"lengthAdjust\"\n            ]);\n            function Bn(t1, e, n, s) {\n                Ln(t1, e, void 0, s);\n                for(const n in e.attrs)t1.setAttribute(jn.has(n) ? n : At(n), e.attrs[n]);\n            }\n            function Fn(t1, e) {\n                const { style: n } = t1, s = {};\n                for(const i in n)(je(n[i]) || e.style && je(e.style[i]) || fn(i, t1)) && (s[i] = n[i]);\n                return s;\n            }\n            function On(t1, e) {\n                const n = Fn(t1, e);\n                for(const s in t1)(je(t1[s]) || je(e[s])) && (n[-1 !== wt.indexOf(s) ? \"attr\" + s.charAt(0).toUpperCase() + s.substring(1) : s] = t1[s]);\n                return n;\n            }\n            function In(t1) {\n                const e = je(t1) ? t1.get() : t1;\n                return n = e, Boolean(n && \"object\" == typeof n && n.mix && n.toValue) ? e.toValue() : e;\n                var n;\n            }\n            const Un = (e)=>(n, s)=>{\n                    const i = (0, t1.useContext)(Xe), o = (0, t1.useContext)(Ge), r = ()=>(function(param, s, i, o) {\n                            let { scrapeMotionValuesFromProps: t1, createRenderState: e, onMount: n } = param;\n                            const r = {\n                                latestValues: Nn(s, i, o, t1),\n                                renderState: e()\n                            };\n                            return n && (r.mount = (t1)=>n(s, t1, r)), r;\n                        })(e, n, i, o);\n                    return s ? r() : We(r);\n                };\n            function Nn(t1, e, n, s) {\n                const i = {}, o = s(t1, {});\n                for(const t1 in o)i[t1] = In(o[t1]);\n                let { initial: r, animate: a } = t1;\n                const l = tn(t1), u = en(t1);\n                e && u && !l && !1 !== t1.inherit && (void 0 === r && (r = e.initial), void 0 === a && (a = e.animate));\n                let c = !!n && !1 === n.initial;\n                c = c || !1 === r;\n                const h = c ? a : r;\n                return h && \"boolean\" != typeof h && !_e(h) && (Array.isArray(h) ? h : [\n                    h\n                ]).forEach((e)=>{\n                    const n = vt(t1, e);\n                    if (!n) return;\n                    const { transitionEnd: s, transition: o, ...r } = n;\n                    for(const t1 in r){\n                        let e = r[t1];\n                        Array.isArray(e) && (e = e[c ? e.length - 1 : 0]), null !== e && (i[t1] = e);\n                    }\n                    for(const t1 in s)i[t1] = s[t1];\n                }), i;\n            }\n            const $n = {\n                useVisualState: Un({\n                    scrapeMotionValuesFromProps: On,\n                    createRenderState: ()=>({\n                            style: {},\n                            transform: {},\n                            transformOrigin: {},\n                            vars: {},\n                            attrs: {}\n                        }),\n                    onMount: (t1, e, param)=>{\n                        let { renderState: n, latestValues: s } = param;\n                        y.read(()=>{\n                            try {\n                                n.dimensions = \"function\" == typeof e.getBBox ? e.getBBox() : e.getBoundingClientRect();\n                            } catch (t1) {\n                                n.dimensions = {\n                                    x: 0,\n                                    y: 0,\n                                    width: 0,\n                                    height: 0\n                                };\n                            }\n                        }), y.render(()=>{\n                            Mn(n, s, {\n                                enableHardwareAcceleration: !1\n                            }, Dn(e.tagName), t1.transformTemplate), Bn(e, n);\n                        });\n                    }\n                })\n            }, Wn = {\n                useVisualState: Un({\n                    scrapeMotionValuesFromProps: Fn,\n                    createRenderState: ()=>({\n                            style: {},\n                            transform: {},\n                            transformOrigin: {},\n                            vars: {}\n                        })\n                })\n            };\n            function Hn(t1, e, n) {\n                let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {\n                    passive: !0\n                };\n                return t1.addEventListener(e, n, s), ()=>t1.removeEventListener(e, n);\n            }\n            const zn = (t1)=>\"mouse\" === t1.pointerType ? \"number\" != typeof t1.button || t1.button <= 0 : !1 !== t1.isPrimary;\n            function Yn(t1) {\n                let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"page\";\n                return {\n                    point: {\n                        x: t1[e + \"X\"],\n                        y: t1[e + \"Y\"]\n                    }\n                };\n            }\n            function Xn(t1, e, n, s) {\n                return Hn(t1, e, ((t1)=>(e)=>zn(e) && t1(e, Yn(e)))(n), s);\n            }\n            function Gn(t1) {\n                let e = null;\n                return ()=>null === e && (e = t1, ()=>{\n                        e = null;\n                    });\n            }\n            const qn = Gn(\"dragHorizontal\"), Zn = Gn(\"dragVertical\");\n            function Kn(t1) {\n                let e = !1;\n                if (\"y\" === t1) e = Zn();\n                else if (\"x\" === t1) e = qn();\n                else {\n                    const t1 = qn(), n = Zn();\n                    t1 && n ? e = ()=>{\n                        t1(), n();\n                    } : (t1 && t1(), n && n());\n                }\n                return e;\n            }\n            function _n() {\n                const t1 = Kn(!0);\n                return !t1 || (t1(), !1);\n            }\n            class Jn {\n                update() {}\n                constructor(t1){\n                    this.isMounted = !1, this.node = t1;\n                }\n            }\n            function Qn(t1, e) {\n                const n = \"pointer\" + (e ? \"enter\" : \"leave\"), s = \"onHover\" + (e ? \"Start\" : \"End\");\n                return Xn(t1.current, n, (n, i)=>{\n                    if (\"touch\" === n.type || _n()) return;\n                    const o = t1.getProps();\n                    t1.animationState && o.whileHover && t1.animationState.setActive(\"whileHover\", e), o[s] && y.update(()=>o[s](n, i));\n                }, {\n                    passive: !t1.getProps()[s]\n                });\n            }\n            const ts = (t1, e)=>!!e && (t1 === e || ts(t1, e.parentElement));\n            function es(t1, e) {\n                if (!e) return;\n                const n = new PointerEvent(\"pointer\" + t1);\n                e(n, Yn(n));\n            }\n            const ns = new WeakMap, ss = new WeakMap, is = (t1)=>{\n                const e = ns.get(t1.target);\n                e && e(t1);\n            }, os = (t1)=>{\n                t1.forEach(is);\n            };\n            const rs = {\n                some: 0,\n                all: 1\n            }, as = {\n                inView: {\n                    Feature: class extends Jn {\n                        startObserver() {\n                            this.unmount();\n                            const { viewport: t1 = {} } = this.node.getProps(), { root: e, margin: n, amount: s = \"some\", once: i } = t1, o = {\n                                root: e ? e.current : void 0,\n                                rootMargin: n,\n                                threshold: \"number\" == typeof s ? s : rs[s]\n                            };\n                            return function(t1, e, n) {\n                                const s = function(param) {\n                                    let { root: t1, ...e } = param;\n                                    const n = t1 || document;\n                                    ss.has(n) || ss.set(n, {});\n                                    const s = ss.get(n), i = JSON.stringify(e);\n                                    return s[i] || (s[i] = new IntersectionObserver(os, {\n                                        root: t1,\n                                        ...e\n                                    })), s[i];\n                                }(e);\n                                return ns.set(t1, n), s.observe(t1), ()=>{\n                                    ns.delete(t1), s.unobserve(t1);\n                                };\n                            }(this.node.current, o, (t1)=>{\n                                const { isIntersecting: e } = t1;\n                                if (this.isInView === e) return;\n                                if (this.isInView = e, i && !e && this.hasEnteredView) return;\n                                e && (this.hasEnteredView = !0), this.node.animationState && this.node.animationState.setActive(\"whileInView\", e);\n                                const { onViewportEnter: n, onViewportLeave: s } = this.node.getProps(), o = e ? n : s;\n                                o && o(t1);\n                            });\n                        }\n                        mount() {\n                            this.startObserver();\n                        }\n                        update() {\n                            if (\"undefined\" == typeof IntersectionObserver) return;\n                            const { props: t1, prevProps: e } = this.node;\n                            [\n                                \"amount\",\n                                \"margin\",\n                                \"root\"\n                            ].some(function(param) {\n                                let { viewport: t1 = {} } = param, { viewport: e = {} } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                                return (n)=>t1[n] !== e[n];\n                            }(t1, e)) && this.startObserver();\n                        }\n                        unmount() {}\n                        constructor(){\n                            super(...arguments), this.hasEnteredView = !1, this.isInView = !1;\n                        }\n                    }\n                },\n                tap: {\n                    Feature: class extends Jn {\n                        startPress(t1, e) {\n                            this.isPressing = !0;\n                            const { onTapStart: n, whileTap: s } = this.node.getProps();\n                            s && this.node.animationState && this.node.animationState.setActive(\"whileTap\", !0), n && y.update(()=>n(t1, e));\n                        }\n                        checkPressEnd() {\n                            return this.removeEndListeners(), this.isPressing = !1, this.node.getProps().whileTap && this.node.animationState && this.node.animationState.setActive(\"whileTap\", !1), !_n();\n                        }\n                        cancelPress(t1, e) {\n                            if (!this.checkPressEnd()) return;\n                            const { onTapCancel: n } = this.node.getProps();\n                            n && y.update(()=>n(t1, e));\n                        }\n                        mount() {\n                            const t1 = this.node.getProps(), e = Xn(this.node.current, \"pointerdown\", this.startPointerPress, {\n                                passive: !(t1.onTapStart || t1.onPointerStart)\n                            }), n = Hn(this.node.current, \"focus\", this.startAccessiblePress);\n                            this.removeStartListeners = se(e, n);\n                        }\n                        unmount() {\n                            this.removeStartListeners(), this.removeEndListeners(), this.removeAccessibleListeners();\n                        }\n                        constructor(){\n                            super(...arguments), this.removeStartListeners = n, this.removeEndListeners = n, this.removeAccessibleListeners = n, this.startPointerPress = (t1, e)=>{\n                                if (this.removeEndListeners(), this.isPressing) return;\n                                const n = this.node.getProps(), s = Xn(window, \"pointerup\", (t1, e)=>{\n                                    if (!this.checkPressEnd()) return;\n                                    const { onTap: n, onTapCancel: s } = this.node.getProps();\n                                    y.update(()=>{\n                                        ts(this.node.current, t1.target) ? n && n(t1, e) : s && s(t1, e);\n                                    });\n                                }, {\n                                    passive: !(n.onTap || n.onPointerUp)\n                                }), i = Xn(window, \"pointercancel\", (t1, e)=>this.cancelPress(t1, e), {\n                                    passive: !(n.onTapCancel || n.onPointerCancel)\n                                });\n                                this.removeEndListeners = se(s, i), this.startPress(t1, e);\n                            }, this.startAccessiblePress = ()=>{\n                                const t1 = Hn(this.node.current, \"keydown\", (t1)=>{\n                                    \"Enter\" !== t1.key || this.isPressing || (this.removeEndListeners(), this.removeEndListeners = Hn(this.node.current, \"keyup\", (t1)=>{\n                                        \"Enter\" === t1.key && this.checkPressEnd() && es(\"up\", (t1, e)=>{\n                                            const { onTap: n } = this.node.getProps();\n                                            n && y.update(()=>n(t1, e));\n                                        });\n                                    }), es(\"down\", (t1, e)=>{\n                                        this.startPress(t1, e);\n                                    }));\n                                }), e = Hn(this.node.current, \"blur\", ()=>{\n                                    this.isPressing && es(\"cancel\", (t1, e)=>this.cancelPress(t1, e));\n                                });\n                                this.removeAccessibleListeners = se(t1, e);\n                            };\n                        }\n                    }\n                },\n                focus: {\n                    Feature: class extends Jn {\n                        onFocus() {\n                            let t1 = !1;\n                            try {\n                                t1 = this.node.current.matches(\":focus-visible\");\n                            } catch (e) {\n                                t1 = !0;\n                            }\n                            t1 && this.node.animationState && (this.node.animationState.setActive(\"whileFocus\", !0), this.isActive = !0);\n                        }\n                        onBlur() {\n                            this.isActive && this.node.animationState && (this.node.animationState.setActive(\"whileFocus\", !1), this.isActive = !1);\n                        }\n                        mount() {\n                            this.unmount = se(Hn(this.node.current, \"focus\", ()=>this.onFocus()), Hn(this.node.current, \"blur\", ()=>this.onBlur()));\n                        }\n                        unmount() {}\n                        constructor(){\n                            super(...arguments), this.isActive = !1;\n                        }\n                    }\n                },\n                hover: {\n                    Feature: class extends Jn {\n                        mount() {\n                            this.unmount = se(Qn(this.node, !0), Qn(this.node, !1));\n                        }\n                        unmount() {}\n                    }\n                }\n            };\n            function ls(t1, e) {\n                if (!Array.isArray(e)) return !1;\n                const n = e.length;\n                if (n !== t1.length) return !1;\n                for(let s = 0; s < n; s++)if (e[s] !== t1[s]) return !1;\n                return !0;\n            }\n            const us = [\n                ...Je\n            ].reverse(), cs = Je.length;\n            function hs() {\n                let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n                return {\n                    isActive: t1,\n                    protectedKeys: {},\n                    needsAnimating: {},\n                    prevResolvedValues: {}\n                };\n            }\n            let ds = 0;\n            const ms = {\n                animation: {\n                    Feature: class extends Jn {\n                        updateAnimationControlsSubscription() {\n                            const { animate: t1 } = this.node.getProps();\n                            this.unmount(), _e(t1) && (this.unmount = t1.subscribe(this.node));\n                        }\n                        mount() {\n                            this.updateAnimationControlsSubscription();\n                        }\n                        update() {\n                            const { animate: t1 } = this.node.getProps(), { animate: e } = this.node.prevProps || {};\n                            t1 !== e && this.updateAnimationControlsSubscription();\n                        }\n                        unmount() {}\n                        constructor(t1){\n                            super(t1), t1.animationState || (t1.animationState = function(t1) {\n                                let e = function(t1) {\n                                    return (e)=>Promise.all(e.map((param)=>{\n                                            let { animation: e, options: n } = param;\n                                            return Ne(t1, e, n);\n                                        }));\n                                }(t1);\n                                const n = {\n                                    animate: hs(!0),\n                                    whileInView: hs(),\n                                    whileHover: hs(),\n                                    whileTap: hs(),\n                                    whileDrag: hs(),\n                                    whileFocus: hs(),\n                                    exit: hs()\n                                };\n                                let s = !0;\n                                const i = (e, n)=>{\n                                    const s = xt(t1, n);\n                                    if (s) {\n                                        const { transition: t1, transitionEnd: n, ...i } = s;\n                                        e = {\n                                            ...e,\n                                            ...i,\n                                            ...n\n                                        };\n                                    }\n                                    return e;\n                                };\n                                function o(o, r) {\n                                    const a = t1.getProps(), l = t1.getVariantContext(!0) || {}, u = [], h = new Set;\n                                    let d = {}, m = 1 / 0;\n                                    for(let e = 0; e < cs; e++){\n                                        const g = us[e], y = n[g], v = void 0 !== a[g] ? a[g] : l[g], x = Ke(v), P = g === r ? y.isActive : null;\n                                        !1 === P && (m = e);\n                                        let b = v === l[g] && v !== a[g] && x;\n                                        if (b && s && t1.manuallyAnimateOnMount && (b = !1), y.protectedKeys = {\n                                            ...d\n                                        }, !y.isActive && null === P || !v && !y.prevProp || _e(v) || \"boolean\" == typeof v) continue;\n                                        const T = (p = y.prevProp, \"string\" == typeof (f = v) ? f !== p : !!Array.isArray(f) && !ls(f, p));\n                                        let S = T || g === r && y.isActive && !b && x || e > m && x;\n                                        const w = Array.isArray(v) ? v : [\n                                            v\n                                        ];\n                                        let E = w.reduce(i, {});\n                                        !1 === P && (E = {});\n                                        const { prevResolvedValues: A = {} } = y, V = {\n                                            ...A,\n                                            ...E\n                                        }, C = (t1)=>{\n                                            S = !0, h.delete(t1), y.needsAnimating[t1] = !0;\n                                        };\n                                        for(const t1 in V){\n                                            const e = E[t1], n = A[t1];\n                                            d.hasOwnProperty(t1) || (e !== n ? c(e) && c(n) ? !ls(e, n) || T ? C(t1) : y.protectedKeys[t1] = !0 : void 0 !== e ? C(t1) : h.add(t1) : void 0 !== e && h.has(t1) ? C(t1) : y.protectedKeys[t1] = !0);\n                                        }\n                                        y.prevProp = v, y.prevResolvedValues = E, y.isActive && (d = {\n                                            ...d,\n                                            ...E\n                                        }), s && t1.blockInitialAnimation && (S = !1), S && !b && u.push(...w.map((t1)=>({\n                                                animation: t1,\n                                                options: {\n                                                    type: g,\n                                                    ...o\n                                                }\n                                            })));\n                                    }\n                                    var p, f;\n                                    if (h.size) {\n                                        const e = {};\n                                        h.forEach((n)=>{\n                                            const s = t1.getBaseTarget(n);\n                                            void 0 !== s && (e[n] = s);\n                                        }), u.push({\n                                            animation: e\n                                        });\n                                    }\n                                    let g = Boolean(u.length);\n                                    return s && !1 === a.initial && !t1.manuallyAnimateOnMount && (g = !1), s = !1, g ? e(u) : Promise.resolve();\n                                }\n                                return {\n                                    animateChanges: o,\n                                    setActive: function(e, s, i) {\n                                        var r;\n                                        if (n[e].isActive === s) return Promise.resolve();\n                                        null === (r = t1.variantChildren) || void 0 === r || r.forEach((t1)=>{\n                                            var n;\n                                            return null === (n = t1.animationState) || void 0 === n ? void 0 : n.setActive(e, s);\n                                        }), n[e].isActive = s;\n                                        const a = o(i, e);\n                                        for(const t1 in n)n[t1].protectedKeys = {};\n                                        return a;\n                                    },\n                                    setAnimateFunction: function(n) {\n                                        e = n(t1);\n                                    },\n                                    getState: ()=>n\n                                };\n                            }(t1));\n                        }\n                    }\n                },\n                exit: {\n                    Feature: class extends Jn {\n                        update() {\n                            if (!this.node.presenceContext) return;\n                            const { isPresent: t1, onExitComplete: e, custom: n } = this.node.presenceContext, { isPresent: s } = this.node.prevPresenceContext || {};\n                            if (!this.node.animationState || t1 === s) return;\n                            const i = this.node.animationState.setActive(\"exit\", !t1, {\n                                custom: null != n ? n : this.node.getProps().custom\n                            });\n                            e && !t1 && i.then(()=>e(this.id));\n                        }\n                        mount() {\n                            const { register: t1 } = this.node.presenceContext || {};\n                            t1 && (this.unmount = t1(this.id));\n                        }\n                        unmount() {}\n                        constructor(){\n                            super(...arguments), this.id = ds++;\n                        }\n                    }\n                }\n            }, ps = (t1, e)=>Math.abs(t1 - e);\n            class fs {\n                updateHandlers(t1) {\n                    this.handlers = t1;\n                }\n                end() {\n                    this.removeListeners && this.removeListeners(), v(this.updatePoint);\n                }\n                constructor(t1, e, { transformPagePoint: n } = {}){\n                    if (this.startEvent = null, this.lastMoveEvent = null, this.lastMoveEventInfo = null, this.handlers = {}, this.updatePoint = ()=>{\n                        if (!this.lastMoveEvent || !this.lastMoveEventInfo) return;\n                        const t1 = vs(this.lastMoveEventInfo, this.history), e = null !== this.startEvent, n = function(t1, e) {\n                            const n = ps(t1.x, e.x), s = ps(t1.y, e.y);\n                            return Math.sqrt(n ** 2 + s ** 2);\n                        }(t1.offset, {\n                            x: 0,\n                            y: 0\n                        }) >= 3;\n                        if (!e && !n) return;\n                        const { point: s } = t1, { timestamp: i } = x;\n                        this.history.push({\n                            ...s,\n                            timestamp: i\n                        });\n                        const { onStart: o, onMove: r } = this.handlers;\n                        e || (o && o(this.lastMoveEvent, t1), this.startEvent = this.lastMoveEvent), r && r(this.lastMoveEvent, t1);\n                    }, this.handlePointerMove = (t1, e)=>{\n                        this.lastMoveEvent = t1, this.lastMoveEventInfo = gs(e, this.transformPagePoint), y.update(this.updatePoint, !0);\n                    }, this.handlePointerUp = (t1, e)=>{\n                        if (this.end(), !this.lastMoveEvent || !this.lastMoveEventInfo) return;\n                        const { onEnd: n, onSessionEnd: s } = this.handlers, i = vs(\"pointercancel\" === t1.type ? this.lastMoveEventInfo : gs(e, this.transformPagePoint), this.history);\n                        this.startEvent && n && n(t1, i), s && s(t1, i);\n                    }, !zn(t1)) return;\n                    this.handlers = e, this.transformPagePoint = n;\n                    const s = gs(Yn(t1), this.transformPagePoint), { point: i } = s, { timestamp: o } = x;\n                    this.history = [\n                        {\n                            ...i,\n                            timestamp: o\n                        }\n                    ];\n                    const { onSessionStart: r } = e;\n                    r && r(t1, vs(s, this.history)), this.removeListeners = se(Xn(window, \"pointermove\", this.handlePointerMove), Xn(window, \"pointerup\", this.handlePointerUp), Xn(window, \"pointercancel\", this.handlePointerUp));\n                }\n            }\n            function gs(t1, e) {\n                return e ? {\n                    point: e(t1.point)\n                } : t1;\n            }\n            function ys(t1, e) {\n                return {\n                    x: t1.x - e.x,\n                    y: t1.y - e.y\n                };\n            }\n            function vs(param, e) {\n                let { point: t1 } = param;\n                return {\n                    point: t1,\n                    delta: ys(t1, Ps(e)),\n                    offset: ys(t1, xs(e)),\n                    velocity: bs(e, .1)\n                };\n            }\n            function xs(t1) {\n                return t1[0];\n            }\n            function Ps(t1) {\n                return t1[t1.length - 1];\n            }\n            function bs(t1, e) {\n                if (t1.length < 2) return {\n                    x: 0,\n                    y: 0\n                };\n                let n = t1.length - 1, s = null;\n                const i = Ps(t1);\n                for(; n >= 0 && (s = t1[n], !(i.timestamp - s.timestamp > Ct(e)));)n--;\n                if (!s) return {\n                    x: 0,\n                    y: 0\n                };\n                const o = Mt(i.timestamp - s.timestamp);\n                if (0 === o) return {\n                    x: 0,\n                    y: 0\n                };\n                const r = {\n                    x: (i.x - s.x) / o,\n                    y: (i.y - s.y) / o\n                };\n                return r.x === 1 / 0 && (r.x = 0), r.y === 1 / 0 && (r.y = 0), r;\n            }\n            function Ts(t1) {\n                return t1.max - t1.min;\n            }\n            function Ss(t1) {\n                let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : .01;\n                return Math.abs(t1 - e) <= n;\n            }\n            function ws(t1, e, n) {\n                let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : .5;\n                t1.origin = s, t1.originPoint = Kt(e.min, e.max, t1.origin), t1.scale = Ts(n) / Ts(e), (Ss(t1.scale, 1, 1e-4) || isNaN(t1.scale)) && (t1.scale = 1), t1.translate = Kt(n.min, n.max, t1.origin) - t1.originPoint, (Ss(t1.translate) || isNaN(t1.translate)) && (t1.translate = 0);\n            }\n            function Es(t1, e, n, s) {\n                ws(t1.x, e.x, n.x, s ? s.originX : void 0), ws(t1.y, e.y, n.y, s ? s.originY : void 0);\n            }\n            function As(t1, e, n) {\n                t1.min = n.min + e.min, t1.max = t1.min + Ts(e);\n            }\n            function Vs(t1, e, n) {\n                t1.min = e.min - n.min, t1.max = t1.min + Ts(e);\n            }\n            function Cs(t1, e, n) {\n                Vs(t1.x, e.x, n.x), Vs(t1.y, e.y, n.y);\n            }\n            function Ms(t1, e, n) {\n                return {\n                    min: void 0 !== e ? t1.min + e : void 0,\n                    max: void 0 !== n ? t1.max + n - (t1.max - t1.min) : void 0\n                };\n            }\n            function Ds(t1, e) {\n                let n = e.min - t1.min, s = e.max - t1.max;\n                return e.max - e.min < t1.max - t1.min && ([n, s] = [\n                    s,\n                    n\n                ]), {\n                    min: n,\n                    max: s\n                };\n            }\n            const ks = .35;\n            function Rs(t1, e, n) {\n                return {\n                    min: Ls(t1, e),\n                    max: Ls(t1, n)\n                };\n            }\n            function Ls(t1, e) {\n                return \"number\" == typeof t1 ? t1 : t1[e] || 0;\n            }\n            function js(t1) {\n                return [\n                    t1(\"x\"),\n                    t1(\"y\")\n                ];\n            }\n            function Bs(param) {\n                let { top: t1, left: e, right: n, bottom: s } = param;\n                return {\n                    x: {\n                        min: e,\n                        max: n\n                    },\n                    y: {\n                        min: t1,\n                        max: s\n                    }\n                };\n            }\n            function Fs(t1) {\n                return void 0 === t1 || 1 === t1;\n            }\n            function Os(param) {\n                let { scale: t1, scaleX: e, scaleY: n } = param;\n                return !Fs(t1) || !Fs(e) || !Fs(n);\n            }\n            function Is(t1) {\n                return Os(t1) || Us(t1) || t1.z || t1.rotate || t1.rotateX || t1.rotateY;\n            }\n            function Us(t1) {\n                return Ns(t1.x) || Ns(t1.y);\n            }\n            function Ns(t1) {\n                return t1 && \"0%\" !== t1;\n            }\n            function $s(t1, e, n) {\n                return n + e * (t1 - n);\n            }\n            function Ws(t1, e, n, s, i) {\n                return void 0 !== i && (t1 = $s(t1, i, s)), $s(t1, n, s) + e;\n            }\n            function Hs(t1) {\n                let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, s = arguments.length > 3 ? arguments[3] : void 0, i = arguments.length > 4 ? arguments[4] : void 0;\n                t1.min = Ws(t1.min, e, n, s, i), t1.max = Ws(t1.max, e, n, s, i);\n            }\n            function zs(t1, param) {\n                let { x: e, y: n } = param;\n                Hs(t1.x, e.translate, e.scale, e.originPoint), Hs(t1.y, n.translate, n.scale, n.originPoint);\n            }\n            function Ys(t1) {\n                return Number.isInteger(t1) || t1 > 1.0000000000001 || t1 < .999999999999 ? t1 : 1;\n            }\n            function Xs(t1, e) {\n                t1.min = t1.min + e, t1.max = t1.max + e;\n            }\n            function Gs(t1, e, param) {\n                let [n, s, i] = param;\n                const o = void 0 !== e[i] ? e[i] : .5, r = Kt(t1.min, t1.max, o);\n                Hs(t1, e[n], e[s], r, e.scale);\n            }\n            const qs = [\n                \"x\",\n                \"scaleX\",\n                \"originX\"\n            ], Zs = [\n                \"y\",\n                \"scaleY\",\n                \"originY\"\n            ];\n            function Ks(t1, e) {\n                Gs(t1.x, e, qs), Gs(t1.y, e, Zs);\n            }\n            function _s1(t1, e) {\n                return Bs(function(t1, e) {\n                    if (!e) return t1;\n                    const n = e({\n                        x: t1.left,\n                        y: t1.top\n                    }), s = e({\n                        x: t1.right,\n                        y: t1.bottom\n                    });\n                    return {\n                        top: n.y,\n                        left: n.x,\n                        bottom: s.y,\n                        right: s.x\n                    };\n                }(t1.getBoundingClientRect(), e));\n            }\n            const Js = new WeakMap;\n            class Qs {\n                start(t1) {\n                    let { snapToCursor: e = !1 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                    const { presenceContext: n } = this.visualElement;\n                    n && !1 === n.isPresent || (this.panSession = new fs(t1, {\n                        onSessionStart: (t1)=>{\n                            this.stopAnimation(), e && this.snapToCursor(Yn(t1, \"page\").point);\n                        },\n                        onStart: (t1, e)=>{\n                            const { drag: n, dragPropagation: s, onDragStart: i } = this.getProps();\n                            if (n && !s && (this.openGlobalLock && this.openGlobalLock(), this.openGlobalLock = Kn(n), !this.openGlobalLock)) return;\n                            this.isDragging = !0, this.currentDirection = null, this.resolveConstraints(), this.visualElement.projection && (this.visualElement.projection.isAnimationBlocked = !0, this.visualElement.projection.target = void 0), js((t1)=>{\n                                let e = this.getAxisMotionValue(t1).get() || 0;\n                                if (H.test(e)) {\n                                    const { projection: n } = this.visualElement;\n                                    if (n && n.layout) {\n                                        const s = n.layout.layoutBox[t1];\n                                        s && (e = Ts(s) * (parseFloat(e) / 100));\n                                    }\n                                }\n                                this.originPoint[t1] = e;\n                            }), i && y.update(()=>i(t1, e), !1, !0);\n                            const { animationState: o } = this.visualElement;\n                            o && o.setActive(\"whileDrag\", !0);\n                        },\n                        onMove: (t1, e)=>{\n                            const { dragPropagation: n, dragDirectionLock: s, onDirectionLock: i, onDrag: o } = this.getProps();\n                            if (!n && !this.openGlobalLock) return;\n                            const { offset: r } = e;\n                            if (s && null === this.currentDirection) return this.currentDirection = function(t1) {\n                                let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n                                let n = null;\n                                return Math.abs(t1.y) > e ? n = \"y\" : Math.abs(t1.x) > e && (n = \"x\"), n;\n                            }(r), void (null !== this.currentDirection && i && i(this.currentDirection));\n                            this.updateAxis(\"x\", e.point, r), this.updateAxis(\"y\", e.point, r), this.visualElement.render(), o && o(t1, e);\n                        },\n                        onSessionEnd: (t1, e)=>this.stop(t1, e)\n                    }, {\n                        transformPagePoint: this.visualElement.getTransformPagePoint()\n                    }));\n                }\n                stop(t1, e) {\n                    const n = this.isDragging;\n                    if (this.cancel(), !n) return;\n                    const { velocity: s } = e;\n                    this.startAnimation(s);\n                    const { onDragEnd: i } = this.getProps();\n                    i && y.update(()=>i(t1, e));\n                }\n                cancel() {\n                    this.isDragging = !1;\n                    const { projection: t1, animationState: e } = this.visualElement;\n                    t1 && (t1.isAnimationBlocked = !1), this.panSession && this.panSession.end(), this.panSession = void 0;\n                    const { dragPropagation: n } = this.getProps();\n                    !n && this.openGlobalLock && (this.openGlobalLock(), this.openGlobalLock = null), e && e.setActive(\"whileDrag\", !1);\n                }\n                updateAxis(t1, e, n) {\n                    const { drag: s } = this.getProps();\n                    if (!n || !ti(t1, s, this.currentDirection)) return;\n                    const i = this.getAxisMotionValue(t1);\n                    let o = this.originPoint[t1] + n[t1];\n                    this.constraints && this.constraints[t1] && (o = function(t1, param, s) {\n                        let { min: e, max: n } = param;\n                        return void 0 !== e && t1 < e ? t1 = s ? Kt(e, t1, s.min) : Math.max(t1, e) : void 0 !== n && t1 > n && (t1 = s ? Kt(n, t1, s.max) : Math.min(t1, n)), t1;\n                    }(o, this.constraints[t1], this.elastic[t1])), i.set(o);\n                }\n                resolveConstraints() {\n                    const { dragConstraints: t1, dragElastic: e } = this.getProps(), { layout: n } = this.visualElement.projection || {}, s = this.constraints;\n                    t1 && Ze(t1) ? this.constraints || (this.constraints = this.resolveRefConstraints()) : this.constraints = !(!t1 || !n) && function(t1, param) {\n                        let { top: e, left: n, bottom: s, right: i } = param;\n                        return {\n                            x: Ms(t1.x, n, i),\n                            y: Ms(t1.y, e, s)\n                        };\n                    }(n.layoutBox, t1), this.elastic = function() {\n                        let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ks;\n                        return !1 === t1 ? t1 = 0 : !0 === t1 && (t1 = ks), {\n                            x: Rs(t1, \"left\", \"right\"),\n                            y: Rs(t1, \"top\", \"bottom\")\n                        };\n                    }(e), s !== this.constraints && n && this.constraints && !this.hasMutatedConstraints && js((t1)=>{\n                        this.getAxisMotionValue(t1) && (this.constraints[t1] = function(t1, e) {\n                            const n = {};\n                            return void 0 !== e.min && (n.min = e.min - t1.min), void 0 !== e.max && (n.max = e.max - t1.min), n;\n                        }(n.layoutBox[t1], this.constraints[t1]));\n                    });\n                }\n                resolveRefConstraints() {\n                    const { dragConstraints: t1, onMeasureDragConstraints: e } = this.getProps();\n                    if (!t1 || !Ze(t1)) return !1;\n                    const n = t1.current;\n                    r(null !== n, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n                    const { projection: s } = this.visualElement;\n                    if (!s || !s.layout) return !1;\n                    const i = function(t1, e, n) {\n                        const s = _s1(t1, n), { scroll: i } = e;\n                        return i && (Xs(s.x, i.offset.x), Xs(s.y, i.offset.y)), s;\n                    }(n, s.root, this.visualElement.getTransformPagePoint());\n                    let o = function(t1, e) {\n                        return {\n                            x: Ds(t1.x, e.x),\n                            y: Ds(t1.y, e.y)\n                        };\n                    }(s.layout.layoutBox, i);\n                    if (e) {\n                        const t1 = e(function(param) {\n                            let { x: t1, y: e } = param;\n                            return {\n                                top: e.min,\n                                right: t1.max,\n                                bottom: e.max,\n                                left: t1.min\n                            };\n                        }(o));\n                        this.hasMutatedConstraints = !!t1, t1 && (o = Bs(t1));\n                    }\n                    return o;\n                }\n                startAnimation(t1) {\n                    const { drag: e, dragMomentum: n, dragElastic: s, dragTransition: i, dragSnapToOrigin: o, onDragTransitionEnd: r } = this.getProps(), a = this.constraints || {}, l = js((r)=>{\n                        if (!ti(r, e, this.currentDirection)) return;\n                        let l = a && a[r] || {};\n                        o && (l = {\n                            min: 0,\n                            max: 0\n                        });\n                        const u = s ? 200 : 1e6, c = s ? 40 : 1e7, h = {\n                            type: \"inertia\",\n                            velocity: n ? t1[r] : 0,\n                            bounceStiffness: u,\n                            bounceDamping: c,\n                            timeConstant: 750,\n                            restDelta: 1,\n                            restSpeed: 10,\n                            ...i,\n                            ...l\n                        };\n                        return this.startAxisValueAnimation(r, h);\n                    });\n                    return Promise.all(l).then(r);\n                }\n                startAxisValueAnimation(t1, e) {\n                    const n = this.getAxisMotionValue(t1);\n                    return n.start(Le(t1, n, 0, e));\n                }\n                stopAnimation() {\n                    js((t1)=>this.getAxisMotionValue(t1).stop());\n                }\n                getAxisMotionValue(t1) {\n                    const e = \"_drag\" + t1.toUpperCase(), n = this.visualElement.getProps();\n                    return n[e] || this.visualElement.getValue(t1, (n.initial ? n.initial[t1] : void 0) || 0);\n                }\n                snapToCursor(t1) {\n                    js((e)=>{\n                        const { drag: n } = this.getProps();\n                        if (!ti(e, n, this.currentDirection)) return;\n                        const { projection: s } = this.visualElement, i = this.getAxisMotionValue(e);\n                        if (s && s.layout) {\n                            const { min: n, max: o } = s.layout.layoutBox[e];\n                            i.set(t1[e] - Kt(n, o, .5));\n                        }\n                    });\n                }\n                scalePositionWithinConstraints() {\n                    if (!this.visualElement.current) return;\n                    const { drag: t1, dragConstraints: e } = this.getProps(), { projection: n } = this.visualElement;\n                    if (!Ze(e) || !n || !this.constraints) return;\n                    this.stopAnimation();\n                    const s = {\n                        x: 0,\n                        y: 0\n                    };\n                    js((t1)=>{\n                        const e = this.getAxisMotionValue(t1);\n                        if (e) {\n                            const n = e.get();\n                            s[t1] = function(t1, e) {\n                                let n = .5;\n                                const s = Ts(t1), i = Ts(e);\n                                return i > s ? n = ue(e.min, e.max - s, t1.min) : s > i && (n = ue(t1.min, t1.max - i, e.min)), R(0, 1, n);\n                            }({\n                                min: n,\n                                max: n\n                            }, this.constraints[t1]);\n                        }\n                    });\n                    const { transformTemplate: i } = this.visualElement.getProps();\n                    this.visualElement.current.style.transform = i ? i({}, \"\") : \"none\", n.root && n.root.updateScroll(), n.updateLayout(), this.resolveConstraints(), js((e)=>{\n                        if (!ti(e, t1, null)) return;\n                        const n = this.getAxisMotionValue(e), { min: i, max: o } = this.constraints[e];\n                        n.set(Kt(i, o, s[e]));\n                    });\n                }\n                addListeners() {\n                    if (!this.visualElement.current) return;\n                    Js.set(this.visualElement, this);\n                    const t1 = Xn(this.visualElement.current, \"pointerdown\", (t1)=>{\n                        const { drag: e, dragListener: n = !0 } = this.getProps();\n                        e && n && this.start(t1);\n                    }), e = ()=>{\n                        const { dragConstraints: t1 } = this.getProps();\n                        Ze(t1) && (this.constraints = this.resolveRefConstraints());\n                    }, { projection: n } = this.visualElement, s = n.addEventListener(\"measure\", e);\n                    n && !n.layout && (n.root && n.root.updateScroll(), n.updateLayout()), e();\n                    const i = Hn(window, \"resize\", ()=>this.scalePositionWithinConstraints()), o = n.addEventListener(\"didUpdate\", (param)=>{\n                        let { delta: t1, hasLayoutChanged: e } = param;\n                        this.isDragging && e && (js((e)=>{\n                            const n = this.getAxisMotionValue(e);\n                            n && (this.originPoint[e] += t1[e].translate, n.set(n.get() + t1[e].translate));\n                        }), this.visualElement.render());\n                    });\n                    return ()=>{\n                        i(), t1(), s(), o && o();\n                    };\n                }\n                getProps() {\n                    const t1 = this.visualElement.getProps(), { drag: e = !1, dragDirectionLock: n = !1, dragPropagation: s = !1, dragConstraints: i = !1, dragElastic: o = ks, dragMomentum: r = !0 } = t1;\n                    return {\n                        ...t1,\n                        drag: e,\n                        dragDirectionLock: n,\n                        dragPropagation: s,\n                        dragConstraints: i,\n                        dragElastic: o,\n                        dragMomentum: r\n                    };\n                }\n                constructor(t1){\n                    this.openGlobalLock = null, this.isDragging = !1, this.currentDirection = null, this.originPoint = {\n                        x: 0,\n                        y: 0\n                    }, this.constraints = !1, this.hasMutatedConstraints = !1, this.elastic = {\n                        x: {\n                            min: 0,\n                            max: 0\n                        },\n                        y: {\n                            min: 0,\n                            max: 0\n                        }\n                    }, this.visualElement = t1;\n                }\n            }\n            function ti(t1, e, n) {\n                return !(!0 !== e && e !== t1 || null !== n && n !== t1);\n            }\n            const ei = (t1)=>(e, n)=>{\n                    t1 && y.update(()=>t1(e, n));\n                }, ni = {\n                hasAnimatedSinceResize: !0,\n                hasEverUpdated: !1\n            };\n            function si(t1, e) {\n                return e.max === e.min ? 0 : t1 / (e.max - e.min) * 100;\n            }\n            const ii = {\n                correct: (t1, e)=>{\n                    if (!e.target) return t1;\n                    if (\"string\" == typeof t1) {\n                        if (!z.test(t1)) return t1;\n                        t1 = parseFloat(t1);\n                    }\n                    return \"\".concat(si(t1, e.target.x), \"% \").concat(si(t1, e.target.y), \"%\");\n                }\n            }, oi = {\n                correct: (t1, param)=>{\n                    let { treeScale: e, projectionDelta: n } = param;\n                    const s = t1, i = it.parse(t1);\n                    if (i.length > 5) return s;\n                    const o = it.createTransformer(t1), r = \"number\" != typeof i[0] ? 1 : 0, a = n.x.scale * e.x, l = n.y.scale * e.y;\n                    i[0 + r] /= a, i[1 + r] /= l;\n                    const u = Kt(a, l, .5);\n                    return \"number\" == typeof i[2 + r] && (i[2 + r] /= u), \"number\" == typeof i[3 + r] && (i[3 + r] /= u), o(i);\n                }\n            };\n            class ri extends t1.Component {\n                componentDidMount() {\n                    const { visualElement: t1, layoutGroup: e, switchLayoutGroup: n, layoutId: s } = this.props, { projection: i } = t1;\n                    var o;\n                    o = li, Object.assign(pn, o), i && (e.group && e.group.add(i), n && n.register && s && n.register(i), i.root.didUpdate(), i.addEventListener(\"animationComplete\", ()=>{\n                        this.safeToRemove();\n                    }), i.setOptions({\n                        ...i.options,\n                        onExitComplete: ()=>this.safeToRemove()\n                    })), ni.hasEverUpdated = !0;\n                }\n                getSnapshotBeforeUpdate(t1) {\n                    const { layoutDependency: e, visualElement: n, drag: s, isPresent: i } = this.props, o = n.projection;\n                    return o ? (o.isPresent = i, s || t1.layoutDependency !== e || void 0 === e ? o.willUpdate() : this.safeToRemove(), t1.isPresent !== i && (i ? o.promote() : o.relegate() || y.postRender(()=>{\n                        const t1 = o.getStack();\n                        t1 && t1.members.length || this.safeToRemove();\n                    })), null) : null;\n                }\n                componentDidUpdate() {\n                    const { projection: t1 } = this.props.visualElement;\n                    t1 && (t1.root.didUpdate(), queueMicrotask(()=>{\n                        !t1.currentAnimation && t1.isLead() && this.safeToRemove();\n                    }));\n                }\n                componentWillUnmount() {\n                    const { visualElement: t1, layoutGroup: e, switchLayoutGroup: n } = this.props, { projection: s } = t1;\n                    s && (s.scheduleCheckAfterUnmount(), e && e.group && e.group.remove(s), n && n.deregister && n.deregister(s));\n                }\n                safeToRemove() {\n                    const { safeToRemove: t1 } = this.props;\n                    t1 && t1();\n                }\n                render() {\n                    return null;\n                }\n            }\n            function ai(e) {\n                const [n, s] = function() {\n                    const e = (0, t1.useContext)(Ge);\n                    if (null === e) return [\n                        !0,\n                        null\n                    ];\n                    const { isPresent: n, onExitComplete: s, register: i } = e, o = (0, t1.useId)();\n                    return (0, t1.useEffect)(()=>i(o), []), !n && s ? [\n                        !1,\n                        ()=>s && s(o)\n                    ] : [\n                        !0\n                    ];\n                }(), i = (0, t1.useContext)(rn);\n                return t1.createElement(ri, {\n                    ...e,\n                    layoutGroup: i,\n                    switchLayoutGroup: (0, t1.useContext)(an),\n                    isPresent: n,\n                    safeToRemove: s\n                });\n            }\n            const li = {\n                borderRadius: {\n                    ...ii,\n                    applyTo: [\n                        \"borderTopLeftRadius\",\n                        \"borderTopRightRadius\",\n                        \"borderBottomLeftRadius\",\n                        \"borderBottomRightRadius\"\n                    ]\n                },\n                borderTopLeftRadius: ii,\n                borderTopRightRadius: ii,\n                borderBottomLeftRadius: ii,\n                borderBottomRightRadius: ii,\n                boxShadow: oi\n            }, ui = [\n                \"TopLeft\",\n                \"TopRight\",\n                \"BottomLeft\",\n                \"BottomRight\"\n            ], ci = ui.length, hi = (t1)=>\"string\" == typeof t1 ? parseFloat(t1) : t1, di = (t1)=>\"number\" == typeof t1 || z.test(t1);\n            function mi(t1, e) {\n                return void 0 !== t1[e] ? t1[e] : t1.borderRadius;\n            }\n            const pi = gi(0, .5, Ht), fi = gi(.5, .95, n);\n            function gi(t1, e, n) {\n                return (s)=>s < t1 ? 0 : s > e ? 1 : n(ue(t1, e, s));\n            }\n            function yi(t1, e) {\n                t1.min = e.min, t1.max = e.max;\n            }\n            function vi(t1, e) {\n                yi(t1.x, e.x), yi(t1.y, e.y);\n            }\n            function xi(t1, e, n, s, i) {\n                return t1 = $s(t1 -= e, 1 / n, s), void 0 !== i && (t1 = $s(t1, 1 / i, s)), t1;\n            }\n            function Pi(t1, e, param, o, r) {\n                let [n, s, i] = param;\n                !function(t1) {\n                    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : .5, i = arguments.length > 4 ? arguments[4] : void 0, o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : t1, r = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : t1;\n                    if (H.test(e) && (e = parseFloat(e), e = Kt(r.min, r.max, e / 100) - r.min), \"number\" != typeof e) return;\n                    let a = Kt(o.min, o.max, s);\n                    t1 === o && (a -= e), t1.min = xi(t1.min, e, n, a, i), t1.max = xi(t1.max, e, n, a, i);\n                }(t1, e[n], e[s], e[i], e.scale, o, r);\n            }\n            const bi = [\n                \"x\",\n                \"scaleX\",\n                \"originX\"\n            ], Ti = [\n                \"y\",\n                \"scaleY\",\n                \"originY\"\n            ];\n            function Si(t1, e, n, s) {\n                Pi(t1.x, e, bi, n ? n.x : void 0, s ? s.x : void 0), Pi(t1.y, e, Ti, n ? n.y : void 0, s ? s.y : void 0);\n            }\n            function wi(t1) {\n                return 0 === t1.translate && 1 === t1.scale;\n            }\n            function Ei(t1) {\n                return wi(t1.x) && wi(t1.y);\n            }\n            function Ai(t1, e) {\n                return Math.round(t1.x.min) === Math.round(e.x.min) && Math.round(t1.x.max) === Math.round(e.x.max) && Math.round(t1.y.min) === Math.round(e.y.min) && Math.round(t1.y.max) === Math.round(e.y.max);\n            }\n            function Vi(t1) {\n                return Ts(t1.x) / Ts(t1.y);\n            }\n            class Ci {\n                add(t1) {\n                    h(this.members, t1), t1.scheduleRender();\n                }\n                remove(t1) {\n                    if (d(this.members, t1), t1 === this.prevLead && (this.prevLead = void 0), t1 === this.lead) {\n                        const t1 = this.members[this.members.length - 1];\n                        t1 && this.promote(t1);\n                    }\n                }\n                relegate(t1) {\n                    const e = this.members.findIndex((e)=>t1 === e);\n                    if (0 === e) return !1;\n                    let n;\n                    for(let t1 = e; t1 >= 0; t1--){\n                        const e = this.members[t1];\n                        if (!1 !== e.isPresent) {\n                            n = e;\n                            break;\n                        }\n                    }\n                    return !!n && (this.promote(n), !0);\n                }\n                promote(t1, e) {\n                    const n = this.lead;\n                    if (t1 !== n && (this.prevLead = n, this.lead = t1, t1.show(), n)) {\n                        n.instance && n.scheduleRender(), t1.scheduleRender(), t1.resumeFrom = n, e && (t1.resumeFrom.preserveOpacity = !0), n.snapshot && (t1.snapshot = n.snapshot, t1.snapshot.latestValues = n.animationValues || n.latestValues), t1.root && t1.root.isUpdating && (t1.isLayoutDirty = !0);\n                        const { crossfade: s } = t1.options;\n                        !1 === s && n.hide();\n                    }\n                }\n                exitAnimationComplete() {\n                    this.members.forEach((t1)=>{\n                        const { options: e, resumingFrom: n } = t1;\n                        e.onExitComplete && e.onExitComplete(), n && n.options.onExitComplete && n.options.onExitComplete();\n                    });\n                }\n                scheduleRender() {\n                    this.members.forEach((t1)=>{\n                        t1.instance && t1.scheduleRender(!1);\n                    });\n                }\n                removeLeadSnapshot() {\n                    this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);\n                }\n                constructor(){\n                    this.members = [];\n                }\n            }\n            function Mi(t1, e, n) {\n                let s = \"\";\n                const i = t1.x.translate / e.x, o = t1.y.translate / e.y;\n                if ((i || o) && (s = \"translate3d(\".concat(i, \"px, \").concat(o, \"px, 0) \")), 1 === e.x && 1 === e.y || (s += \"scale(\".concat(1 / e.x, \", \").concat(1 / e.y, \") \")), n) {\n                    const { rotate: t1, rotateX: e, rotateY: i } = n;\n                    t1 && (s += \"rotate(\".concat(t1, \"deg) \")), e && (s += \"rotateX(\".concat(e, \"deg) \")), i && (s += \"rotateY(\".concat(i, \"deg) \"));\n                }\n                const r = t1.x.scale * e.x, a = t1.y.scale * e.y;\n                return 1 === r && 1 === a || (s += \"scale(\".concat(r, \", \").concat(a, \")\")), s || \"none\";\n            }\n            const Di = (t1, e)=>t1.depth - e.depth;\n            class ki {\n                add(t1) {\n                    h(this.children, t1), this.isDirty = !0;\n                }\n                remove(t1) {\n                    d(this.children, t1), this.isDirty = !0;\n                }\n                forEach(t1) {\n                    this.isDirty && this.children.sort(Di), this.isDirty = !1, this.children.forEach(t1);\n                }\n                constructor(){\n                    this.children = [], this.isDirty = !1;\n                }\n            }\n            const Ri = [\n                \"\",\n                \"X\",\n                \"Y\",\n                \"Z\"\n            ];\n            let Li = 0;\n            const ji = {\n                type: \"projectionFrame\",\n                totalNodes: 0,\n                resolvedTargetDeltas: 0,\n                recalculatedProjection: 0\n            };\n            function Bi(param) {\n                let { attachResizeListener: t1, defaultParent: e, measureScroll: n, checkIsScrollRoot: s, resetTransform: i } = param;\n                return class {\n                    addEventListener(t1, e) {\n                        return this.eventHandlers.has(t1) || this.eventHandlers.set(t1, new m), this.eventHandlers.get(t1).add(e);\n                    }\n                    notifyListeners(t1) {\n                        for(var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            e[_key - 1] = arguments[_key];\n                        }\n                        const n = this.eventHandlers.get(t1);\n                        n && n.notify(...e);\n                    }\n                    hasListeners(t1) {\n                        return this.eventHandlers.has(t1);\n                    }\n                    mount(e) {\n                        let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.root.hasTreeAnimated;\n                        if (this.instance) return;\n                        var s;\n                        this.isSVG = (s = e) instanceof SVGElement && \"svg\" !== s.tagName, this.instance = e;\n                        const { layoutId: i, layout: o, visualElement: r } = this.options;\n                        if (r && !r.current && r.mount(e), this.root.nodes.add(this), this.parent && this.parent.children.add(this), n && (o || i) && (this.isLayoutDirty = !0), t1) {\n                            let n;\n                            const s = ()=>this.root.updateBlockedByResize = !1;\n                            t1(e, ()=>{\n                                this.root.updateBlockedByResize = !0, n && n(), n = function(t1, e) {\n                                    const n = performance.now(), s = (param)=>{\n                                        let { timestamp: e } = param;\n                                        const i = e - n;\n                                        i >= 250 && (v(s), t1(i - 250));\n                                    };\n                                    return y.read(s, !0), ()=>v(s);\n                                }(s), ni.hasAnimatedSinceResize && (ni.hasAnimatedSinceResize = !1, this.nodes.forEach(zi));\n                            });\n                        }\n                        i && this.root.registerSharedNode(i, this), !1 !== this.options.animate && r && (i || o) && this.addEventListener(\"didUpdate\", (param)=>{\n                            let { delta: t1, hasLayoutChanged: e, hasRelativeTargetChanged: n, layout: s } = param;\n                            if (this.isTreeAnimationBlocked()) return this.target = void 0, void (this.relativeTarget = void 0);\n                            const i = this.options.transition || r.getDefaultTransition() || Ji, { onLayoutAnimationStart: o, onLayoutAnimationComplete: a } = r.getProps(), l = !this.targetLayout || !Ai(this.targetLayout, s) || n, u = !e && n;\n                            if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || u || e && (l || !this.currentAnimation)) {\n                                this.resumeFrom && (this.resumingFrom = this.resumeFrom, this.resumingFrom.resumingFrom = void 0), this.setAnimationOrigin(t1, u);\n                                const e = {\n                                    ...Re(i, \"layout\"),\n                                    onPlay: o,\n                                    onComplete: a\n                                };\n                                (r.shouldReduceMotion || this.options.layoutRoot) && (e.delay = 0, e.type = !1), this.startAnimation(e);\n                            } else e || zi(this), this.isLead() && this.options.onExitComplete && this.options.onExitComplete();\n                            this.targetLayout = s;\n                        });\n                    }\n                    unmount() {\n                        this.options.layoutId && this.willUpdate(), this.root.nodes.remove(this);\n                        const t1 = this.getStack();\n                        t1 && t1.remove(this), this.parent && this.parent.children.delete(this), this.instance = void 0, v(this.updateProjection);\n                    }\n                    blockUpdate() {\n                        this.updateManuallyBlocked = !0;\n                    }\n                    unblockUpdate() {\n                        this.updateManuallyBlocked = !1;\n                    }\n                    isUpdateBlocked() {\n                        return this.updateManuallyBlocked || this.updateBlockedByResize;\n                    }\n                    isTreeAnimationBlocked() {\n                        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || !1;\n                    }\n                    startUpdate() {\n                        this.isUpdateBlocked() || (this.isUpdating = !0, this.nodes && this.nodes.forEach(Gi), this.animationId++);\n                    }\n                    getTransformTemplate() {\n                        const { visualElement: t1 } = this.options;\n                        return t1 && t1.getProps().transformTemplate;\n                    }\n                    willUpdate() {\n                        let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n                        if (this.root.hasTreeAnimated = !0, this.root.isUpdateBlocked()) return void (this.options.onExitComplete && this.options.onExitComplete());\n                        if (!this.root.isUpdating && this.root.startUpdate(), this.isLayoutDirty) return;\n                        this.isLayoutDirty = !0;\n                        for(let t1 = 0; t1 < this.path.length; t1++){\n                            const e = this.path[t1];\n                            e.shouldResetTransform = !0, e.updateScroll(\"snapshot\"), e.options.layoutRoot && e.willUpdate(!1);\n                        }\n                        const { layoutId: e, layout: n } = this.options;\n                        if (void 0 === e && !n) return;\n                        const s = this.getTransformTemplate();\n                        this.prevTransformTemplateValue = s ? s(this.latestValues, \"\") : void 0, this.updateSnapshot(), t1 && this.notifyListeners(\"willUpdate\");\n                    }\n                    update() {\n                        if (this.updateScheduled = !1, this.isUpdateBlocked()) return this.unblockUpdate(), this.clearAllSnapshots(), void this.nodes.forEach($i);\n                        this.isUpdating || this.nodes.forEach(Wi), this.isUpdating = !1, this.nodes.forEach(Hi), this.nodes.forEach(Fi), this.nodes.forEach(Oi), this.clearAllSnapshots();\n                        const t1 = performance.now();\n                        x.delta = R(0, 1e3 / 60, t1 - x.timestamp), x.timestamp = t1, x.isProcessing = !0, P.update.process(x), P.preRender.process(x), P.render.process(x), x.isProcessing = !1;\n                    }\n                    didUpdate() {\n                        this.updateScheduled || (this.updateScheduled = !0, queueMicrotask(()=>this.update()));\n                    }\n                    clearAllSnapshots() {\n                        this.nodes.forEach(Ni), this.sharedNodes.forEach(qi);\n                    }\n                    scheduleUpdateProjection() {\n                        y.preRender(this.updateProjection, !1, !0);\n                    }\n                    scheduleCheckAfterUnmount() {\n                        y.postRender(()=>{\n                            this.isLayoutDirty ? this.root.didUpdate() : this.root.checkUpdateFailed();\n                        });\n                    }\n                    updateSnapshot() {\n                        !this.snapshot && this.instance && (this.snapshot = this.measure());\n                    }\n                    updateLayout() {\n                        if (!this.instance) return;\n                        if (this.updateScroll(), !(this.options.alwaysMeasureLayout && this.isLead() || this.isLayoutDirty)) return;\n                        if (this.resumeFrom && !this.resumeFrom.instance) for(let t1 = 0; t1 < this.path.length; t1++)this.path[t1].updateScroll();\n                        const t1 = this.layout;\n                        this.layout = this.measure(!1), this.layoutCorrected = {\n                            x: {\n                                min: 0,\n                                max: 0\n                            },\n                            y: {\n                                min: 0,\n                                max: 0\n                            }\n                        }, this.isLayoutDirty = !1, this.projectionDelta = void 0, this.notifyListeners(\"measure\", this.layout.layoutBox);\n                        const { visualElement: e } = this.options;\n                        e && e.notify(\"LayoutMeasure\", this.layout.layoutBox, t1 ? t1.layoutBox : void 0);\n                    }\n                    updateScroll() {\n                        let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"measure\";\n                        let e = Boolean(this.options.layoutScroll && this.instance);\n                        this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === t1 && (e = !1), e && (this.scroll = {\n                            animationId: this.root.animationId,\n                            phase: t1,\n                            isRoot: s(this.instance),\n                            offset: n(this.instance)\n                        });\n                    }\n                    resetTransform() {\n                        if (!i) return;\n                        const t1 = this.isLayoutDirty || this.shouldResetTransform, e = this.projectionDelta && !Ei(this.projectionDelta), n = this.getTransformTemplate(), s = n ? n(this.latestValues, \"\") : void 0, o = s !== this.prevTransformTemplateValue;\n                        t1 && (e || Is(this.latestValues) || o) && (i(this.instance, s), this.shouldResetTransform = !1, this.scheduleRender());\n                    }\n                    measure() {\n                        let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n                        const e = this.measurePageBox();\n                        let n = this.removeElementScroll(e);\n                        var s;\n                        return t1 && (n = this.removeTransform(n)), eo((s = n).x), eo(s.y), {\n                            animationId: this.root.animationId,\n                            measuredBox: e,\n                            layoutBox: n,\n                            latestValues: {},\n                            source: this.id\n                        };\n                    }\n                    measurePageBox() {\n                        const { visualElement: t1 } = this.options;\n                        if (!t1) return {\n                            x: {\n                                min: 0,\n                                max: 0\n                            },\n                            y: {\n                                min: 0,\n                                max: 0\n                            }\n                        };\n                        const e = t1.measureViewportBox(), { scroll: n } = this.root;\n                        return n && (Xs(e.x, n.offset.x), Xs(e.y, n.offset.y)), e;\n                    }\n                    removeElementScroll(t1) {\n                        const e = {\n                            x: {\n                                min: 0,\n                                max: 0\n                            },\n                            y: {\n                                min: 0,\n                                max: 0\n                            }\n                        };\n                        vi(e, t1);\n                        for(let n = 0; n < this.path.length; n++){\n                            const s = this.path[n], { scroll: i, options: o } = s;\n                            if (s !== this.root && i && o.layoutScroll) {\n                                if (i.isRoot) {\n                                    vi(e, t1);\n                                    const { scroll: n } = this.root;\n                                    n && (Xs(e.x, -n.offset.x), Xs(e.y, -n.offset.y));\n                                }\n                                Xs(e.x, i.offset.x), Xs(e.y, i.offset.y);\n                            }\n                        }\n                        return e;\n                    }\n                    applyTransform(t1) {\n                        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        const n = {\n                            x: {\n                                min: 0,\n                                max: 0\n                            },\n                            y: {\n                                min: 0,\n                                max: 0\n                            }\n                        };\n                        vi(n, t1);\n                        for(let t1 = 0; t1 < this.path.length; t1++){\n                            const s = this.path[t1];\n                            !e && s.options.layoutScroll && s.scroll && s !== s.root && Ks(n, {\n                                x: -s.scroll.offset.x,\n                                y: -s.scroll.offset.y\n                            }), Is(s.latestValues) && Ks(n, s.latestValues);\n                        }\n                        return Is(this.latestValues) && Ks(n, this.latestValues), n;\n                    }\n                    removeTransform(t1) {\n                        const e = {\n                            x: {\n                                min: 0,\n                                max: 0\n                            },\n                            y: {\n                                min: 0,\n                                max: 0\n                            }\n                        };\n                        vi(e, t1);\n                        for(let t1 = 0; t1 < this.path.length; t1++){\n                            const n = this.path[t1];\n                            if (!n.instance) continue;\n                            if (!Is(n.latestValues)) continue;\n                            Os(n.latestValues) && n.updateSnapshot();\n                            const s = {\n                                x: {\n                                    min: 0,\n                                    max: 0\n                                },\n                                y: {\n                                    min: 0,\n                                    max: 0\n                                }\n                            };\n                            vi(s, n.measurePageBox()), Si(e, n.latestValues, n.snapshot ? n.snapshot.layoutBox : void 0, s);\n                        }\n                        return Is(this.latestValues) && Si(e, this.latestValues), e;\n                    }\n                    setTargetDelta(t1) {\n                        this.targetDelta = t1, this.root.scheduleUpdateProjection(), this.isProjectionDirty = !0;\n                    }\n                    setOptions(t1) {\n                        this.options = {\n                            ...this.options,\n                            ...t1,\n                            crossfade: void 0 === t1.crossfade || t1.crossfade\n                        };\n                    }\n                    clearMeasurements() {\n                        this.scroll = void 0, this.layout = void 0, this.snapshot = void 0, this.prevTransformTemplateValue = void 0, this.targetDelta = void 0, this.target = void 0, this.isLayoutDirty = !1;\n                    }\n                    forceRelativeParentToResolveTarget() {\n                        this.relativeParent && this.relativeParent.resolvedRelativeTargetAt !== x.timestamp && this.relativeParent.resolveTargetDelta(!0);\n                    }\n                    resolveTargetDelta() {\n                        let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n                        var e;\n                        const n = this.getLead();\n                        this.isProjectionDirty || (this.isProjectionDirty = n.isProjectionDirty), this.isTransformDirty || (this.isTransformDirty = n.isTransformDirty), this.isSharedProjectionDirty || (this.isSharedProjectionDirty = n.isSharedProjectionDirty);\n                        const s = Boolean(this.resumingFrom) || this !== n;\n                        if (!(t1 || s && this.isSharedProjectionDirty || this.isProjectionDirty || (null === (e = this.parent) || void 0 === e ? void 0 : e.isProjectionDirty) || this.attemptToResolveRelativeTarget)) return;\n                        const { layout: i, layoutId: o } = this.options;\n                        if (this.layout && (i || o)) {\n                            if (this.resolvedRelativeTargetAt = x.timestamp, !this.targetDelta && !this.relativeTarget) {\n                                const t1 = this.getClosestProjectingParent();\n                                t1 && t1.layout && 1 !== this.animationProgress ? (this.relativeParent = t1, this.forceRelativeParentToResolveTarget(), this.relativeTarget = {\n                                    x: {\n                                        min: 0,\n                                        max: 0\n                                    },\n                                    y: {\n                                        min: 0,\n                                        max: 0\n                                    }\n                                }, this.relativeTargetOrigin = {\n                                    x: {\n                                        min: 0,\n                                        max: 0\n                                    },\n                                    y: {\n                                        min: 0,\n                                        max: 0\n                                    }\n                                }, Cs(this.relativeTargetOrigin, this.layout.layoutBox, t1.layout.layoutBox), vi(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;\n                            }\n                            if (this.relativeTarget || this.targetDelta) {\n                                var r, a, l;\n                                if (this.target || (this.target = {\n                                    x: {\n                                        min: 0,\n                                        max: 0\n                                    },\n                                    y: {\n                                        min: 0,\n                                        max: 0\n                                    }\n                                }, this.targetWithTransforms = {\n                                    x: {\n                                        min: 0,\n                                        max: 0\n                                    },\n                                    y: {\n                                        min: 0,\n                                        max: 0\n                                    }\n                                }), this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target ? (this.forceRelativeParentToResolveTarget(), r = this.target, a = this.relativeTarget, l = this.relativeParent.target, As(r.x, a.x, l.x), As(r.y, a.y, l.y)) : this.targetDelta ? (Boolean(this.resumingFrom) ? this.target = this.applyTransform(this.layout.layoutBox) : vi(this.target, this.layout.layoutBox), zs(this.target, this.targetDelta)) : vi(this.target, this.layout.layoutBox), this.attemptToResolveRelativeTarget) {\n                                    this.attemptToResolveRelativeTarget = !1;\n                                    const t1 = this.getClosestProjectingParent();\n                                    t1 && Boolean(t1.resumingFrom) === Boolean(this.resumingFrom) && !t1.options.layoutScroll && t1.target && 1 !== this.animationProgress ? (this.relativeParent = t1, this.forceRelativeParentToResolveTarget(), this.relativeTarget = {\n                                        x: {\n                                            min: 0,\n                                            max: 0\n                                        },\n                                        y: {\n                                            min: 0,\n                                            max: 0\n                                        }\n                                    }, this.relativeTargetOrigin = {\n                                        x: {\n                                            min: 0,\n                                            max: 0\n                                        },\n                                        y: {\n                                            min: 0,\n                                            max: 0\n                                        }\n                                    }, Cs(this.relativeTargetOrigin, this.target, t1.target), vi(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;\n                                }\n                                ji.resolvedTargetDeltas++;\n                            }\n                        }\n                    }\n                    getClosestProjectingParent() {\n                        if (this.parent && !Os(this.parent.latestValues) && !Us(this.parent.latestValues)) return this.parent.isProjecting() ? this.parent : this.parent.getClosestProjectingParent();\n                    }\n                    isProjecting() {\n                        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n                    }\n                    calcProjection() {\n                        var t1;\n                        const e = this.getLead(), n = Boolean(this.resumingFrom) || this !== e;\n                        let s = !0;\n                        if ((this.isProjectionDirty || (null === (t1 = this.parent) || void 0 === t1 ? void 0 : t1.isProjectionDirty)) && (s = !1), n && (this.isSharedProjectionDirty || this.isTransformDirty) && (s = !1), this.resolvedRelativeTargetAt === x.timestamp && (s = !1), s) return;\n                        const { layout: i, layoutId: o } = this.options;\n                        if (this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation), this.isTreeAnimating || (this.targetDelta = this.relativeTarget = void 0), !this.layout || !i && !o) return;\n                        vi(this.layoutCorrected, this.layout.layoutBox);\n                        const r = this.treeScale.x, a = this.treeScale.y;\n                        !function(t1, e, n) {\n                            let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;\n                            const i = n.length;\n                            if (!i) return;\n                            let o, r;\n                            e.x = e.y = 1;\n                            for(let a = 0; a < i; a++){\n                                o = n[a], r = o.projectionDelta;\n                                const i = o.instance;\n                                i && i.style && \"contents\" === i.style.display || (s && o.options.layoutScroll && o.scroll && o !== o.root && Ks(t1, {\n                                    x: -o.scroll.offset.x,\n                                    y: -o.scroll.offset.y\n                                }), r && (e.x *= r.x.scale, e.y *= r.y.scale, zs(t1, r)), s && Is(o.latestValues) && Ks(t1, o.latestValues));\n                            }\n                            e.x = Ys(e.x), e.y = Ys(e.y);\n                        }(this.layoutCorrected, this.treeScale, this.path, n), !e.layout || e.target || 1 === this.treeScale.x && 1 === this.treeScale.y || (e.target = e.layout.layoutBox);\n                        const { target: l } = e;\n                        if (!l) return void (this.projectionTransform && (this.projectionDelta = {\n                            x: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            },\n                            y: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            }\n                        }, this.projectionTransform = \"none\", this.scheduleRender()));\n                        this.projectionDelta || (this.projectionDelta = {\n                            x: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            },\n                            y: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            }\n                        }, this.projectionDeltaWithTransform = {\n                            x: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            },\n                            y: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            }\n                        });\n                        const u = this.projectionTransform;\n                        Es(this.projectionDelta, this.layoutCorrected, l, this.latestValues), this.projectionTransform = Mi(this.projectionDelta, this.treeScale), this.projectionTransform === u && this.treeScale.x === r && this.treeScale.y === a || (this.hasProjected = !0, this.scheduleRender(), this.notifyListeners(\"projectionUpdate\", l)), ji.recalculatedProjection++;\n                    }\n                    hide() {\n                        this.isVisible = !1;\n                    }\n                    show() {\n                        this.isVisible = !0;\n                    }\n                    scheduleRender() {\n                        let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n                        if (this.options.scheduleRender && this.options.scheduleRender(), t1) {\n                            const t1 = this.getStack();\n                            t1 && t1.scheduleRender();\n                        }\n                        this.resumingFrom && !this.resumingFrom.instance && (this.resumingFrom = void 0);\n                    }\n                    setAnimationOrigin(t1) {\n                        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        const n = this.snapshot, s = n ? n.latestValues : {}, i = {\n                            ...this.latestValues\n                        }, o = {\n                            x: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            },\n                            y: {\n                                translate: 0,\n                                scale: 1,\n                                origin: 0,\n                                originPoint: 0\n                            }\n                        };\n                        this.relativeParent && this.relativeParent.options.layoutRoot || (this.relativeTarget = this.relativeTargetOrigin = void 0), this.attemptToResolveRelativeTarget = !e;\n                        const r = {\n                            x: {\n                                min: 0,\n                                max: 0\n                            },\n                            y: {\n                                min: 0,\n                                max: 0\n                            }\n                        }, a = (n ? n.source : void 0) !== (this.layout ? this.layout.source : void 0), l = this.getStack(), u = !l || l.members.length <= 1, c = Boolean(a && !u && !0 === this.options.crossfade && !this.path.some(_i));\n                        let h;\n                        this.animationProgress = 0, this.mixTargetDelta = (e)=>{\n                            const n = e / 1e3;\n                            var l, d, m, p, f, g;\n                            Zi(o.x, t1.x, n), Zi(o.y, t1.y, n), this.setTargetDelta(o), this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout && (Cs(r, this.layout.layoutBox, this.relativeParent.layout.layoutBox), m = this.relativeTarget, p = this.relativeTargetOrigin, f = r, g = n, Ki(m.x, p.x, f.x, g), Ki(m.y, p.y, f.y, g), h && (l = this.relativeTarget, d = h, l.x.min === d.x.min && l.x.max === d.x.max && l.y.min === d.y.min && l.y.max === d.y.max) && (this.isProjectionDirty = !1), h || (h = {\n                                x: {\n                                    min: 0,\n                                    max: 0\n                                },\n                                y: {\n                                    min: 0,\n                                    max: 0\n                                }\n                            }), vi(h, this.relativeTarget)), a && (this.animationValues = i, function(t1, e, n, s, i, o) {\n                                i ? (t1.opacity = Kt(0, void 0 !== n.opacity ? n.opacity : 1, pi(s)), t1.opacityExit = Kt(void 0 !== e.opacity ? e.opacity : 1, 0, fi(s))) : o && (t1.opacity = Kt(void 0 !== e.opacity ? e.opacity : 1, void 0 !== n.opacity ? n.opacity : 1, s));\n                                for(let i = 0; i < ci; i++){\n                                    const o = \"border\".concat(ui[i], \"Radius\");\n                                    let r = mi(e, o), a = mi(n, o);\n                                    void 0 === r && void 0 === a || (r || (r = 0), a || (a = 0), 0 === r || 0 === a || di(r) === di(a) ? (t1[o] = Math.max(Kt(hi(r), hi(a), s), 0), (H.test(a) || H.test(r)) && (t1[o] += \"%\")) : t1[o] = a);\n                                }\n                                (e.rotate || n.rotate) && (t1.rotate = Kt(e.rotate || 0, n.rotate || 0, s));\n                            }(i, s, this.latestValues, n, c, u)), this.root.scheduleUpdateProjection(), this.scheduleRender(), this.animationProgress = n;\n                        }, this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);\n                    }\n                    startAnimation(t1) {\n                        this.notifyListeners(\"animationStart\"), this.currentAnimation && this.currentAnimation.stop(), this.resumingFrom && this.resumingFrom.currentAnimation && this.resumingFrom.currentAnimation.stop(), this.pendingAnimation && (v(this.pendingAnimation), this.pendingAnimation = void 0), this.pendingAnimation = y.update(()=>{\n                            ni.hasAnimatedSinceResize = !0, this.currentAnimation = function(t1, e, n) {\n                                const s = je(0) ? 0 : S(0);\n                                return s.start(Le(\"\", s, 1e3, n)), s.animation;\n                            }(0, 0, {\n                                ...t1,\n                                onUpdate: (e)=>{\n                                    this.mixTargetDelta(e), t1.onUpdate && t1.onUpdate(e);\n                                },\n                                onComplete: ()=>{\n                                    t1.onComplete && t1.onComplete(), this.completeAnimation();\n                                }\n                            }), this.resumingFrom && (this.resumingFrom.currentAnimation = this.currentAnimation), this.pendingAnimation = void 0;\n                        });\n                    }\n                    completeAnimation() {\n                        this.resumingFrom && (this.resumingFrom.currentAnimation = void 0, this.resumingFrom.preserveOpacity = void 0);\n                        const t1 = this.getStack();\n                        t1 && t1.exitAnimationComplete(), this.resumingFrom = this.currentAnimation = this.animationValues = void 0, this.notifyListeners(\"animationComplete\");\n                    }\n                    finishAnimation() {\n                        this.currentAnimation && (this.mixTargetDelta && this.mixTargetDelta(1e3), this.currentAnimation.stop()), this.completeAnimation();\n                    }\n                    applyTransformsToTarget() {\n                        const t1 = this.getLead();\n                        let { targetWithTransforms: e, target: n, layout: s, latestValues: i } = t1;\n                        if (e && n && s) {\n                            if (this !== t1 && this.layout && s && no(this.options.animationType, this.layout.layoutBox, s.layoutBox)) {\n                                n = this.target || {\n                                    x: {\n                                        min: 0,\n                                        max: 0\n                                    },\n                                    y: {\n                                        min: 0,\n                                        max: 0\n                                    }\n                                };\n                                const e = Ts(this.layout.layoutBox.x);\n                                n.x.min = t1.target.x.min, n.x.max = n.x.min + e;\n                                const s = Ts(this.layout.layoutBox.y);\n                                n.y.min = t1.target.y.min, n.y.max = n.y.min + s;\n                            }\n                            vi(e, n), Ks(e, i), Es(this.projectionDeltaWithTransform, this.layoutCorrected, e, i);\n                        }\n                    }\n                    registerSharedNode(t1, e) {\n                        this.sharedNodes.has(t1) || this.sharedNodes.set(t1, new Ci), this.sharedNodes.get(t1).add(e);\n                        const n = e.options.initialPromotionConfig;\n                        e.promote({\n                            transition: n ? n.transition : void 0,\n                            preserveFollowOpacity: n && n.shouldPreserveFollowOpacity ? n.shouldPreserveFollowOpacity(e) : void 0\n                        });\n                    }\n                    isLead() {\n                        const t1 = this.getStack();\n                        return !t1 || t1.lead === this;\n                    }\n                    getLead() {\n                        var t1;\n                        const { layoutId: e } = this.options;\n                        return e && (null === (t1 = this.getStack()) || void 0 === t1 ? void 0 : t1.lead) || this;\n                    }\n                    getPrevLead() {\n                        var t1;\n                        const { layoutId: e } = this.options;\n                        return e ? null === (t1 = this.getStack()) || void 0 === t1 ? void 0 : t1.prevLead : void 0;\n                    }\n                    getStack() {\n                        const { layoutId: t1 } = this.options;\n                        if (t1) return this.root.sharedNodes.get(t1);\n                    }\n                    promote() {\n                        let { needsReset: t1, transition: e, preserveFollowOpacity: n } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n                        const s = this.getStack();\n                        s && s.promote(this, n), t1 && (this.projectionDelta = void 0, this.needsReset = !0), e && this.setOptions({\n                            transition: e\n                        });\n                    }\n                    relegate() {\n                        const t1 = this.getStack();\n                        return !!t1 && t1.relegate(this);\n                    }\n                    resetRotation() {\n                        const { visualElement: t1 } = this.options;\n                        if (!t1) return;\n                        let e = !1;\n                        const { latestValues: n } = t1;\n                        if ((n.rotate || n.rotateX || n.rotateY || n.rotateZ) && (e = !0), !e) return;\n                        const s = {};\n                        for(let e = 0; e < Ri.length; e++){\n                            const i = \"rotate\" + Ri[e];\n                            n[i] && (s[i] = n[i], t1.setStaticValue(i, 0));\n                        }\n                        t1.render();\n                        for(const e in s)t1.setStaticValue(e, s[e]);\n                        t1.scheduleRender();\n                    }\n                    getProjectionStyles() {\n                        let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n                        var e, n;\n                        const s = {};\n                        if (!this.instance || this.isSVG) return s;\n                        if (!this.isVisible) return {\n                            visibility: \"hidden\"\n                        };\n                        s.visibility = \"\";\n                        const i = this.getTransformTemplate();\n                        if (this.needsReset) return this.needsReset = !1, s.opacity = \"\", s.pointerEvents = In(t1.pointerEvents) || \"\", s.transform = i ? i(this.latestValues, \"\") : \"none\", s;\n                        const o = this.getLead();\n                        if (!this.projectionDelta || !this.layout || !o.target) {\n                            const e = {};\n                            return this.options.layoutId && (e.opacity = void 0 !== this.latestValues.opacity ? this.latestValues.opacity : 1, e.pointerEvents = In(t1.pointerEvents) || \"\"), this.hasProjected && !Is(this.latestValues) && (e.transform = i ? i({}, \"\") : \"none\", this.hasProjected = !1), e;\n                        }\n                        const r = o.animationValues || o.latestValues;\n                        this.applyTransformsToTarget(), s.transform = Mi(this.projectionDeltaWithTransform, this.treeScale, r), i && (s.transform = i(r, s.transform));\n                        const { x: a, y: l } = this.projectionDelta;\n                        s.transformOrigin = \"\".concat(100 * a.origin, \"% \").concat(100 * l.origin, \"% 0\"), o.animationValues ? s.opacity = o === this ? null !== (n = null !== (e = r.opacity) && void 0 !== e ? e : this.latestValues.opacity) && void 0 !== n ? n : 1 : this.preserveOpacity ? this.latestValues.opacity : r.opacityExit : s.opacity = o === this ? void 0 !== r.opacity ? r.opacity : \"\" : void 0 !== r.opacityExit ? r.opacityExit : 0;\n                        for(const t1 in pn){\n                            if (void 0 === r[t1]) continue;\n                            const { correct: e, applyTo: n } = pn[t1], i = \"none\" === s.transform ? r[t1] : e(r[t1], o);\n                            if (n) {\n                                const t1 = n.length;\n                                for(let e = 0; e < t1; e++)s[n[e]] = i;\n                            } else s[t1] = i;\n                        }\n                        return this.options.layoutId && (s.pointerEvents = o === this ? In(t1.pointerEvents) || \"\" : \"none\"), s;\n                    }\n                    clearSnapshot() {\n                        this.resumeFrom = this.snapshot = void 0;\n                    }\n                    resetTree() {\n                        this.root.nodes.forEach((t1)=>{\n                            var e;\n                            return null === (e = t1.currentAnimation) || void 0 === e ? void 0 : e.stop();\n                        }), this.root.nodes.forEach($i), this.root.sharedNodes.clear();\n                    }\n                    constructor(t1 = {}, n = null == e ? void 0 : e()){\n                        this.id = Li++, this.animationId = 0, this.children = new Set, this.options = {}, this.isTreeAnimating = !1, this.isAnimationBlocked = !1, this.isLayoutDirty = !1, this.isProjectionDirty = !1, this.isSharedProjectionDirty = !1, this.isTransformDirty = !1, this.updateManuallyBlocked = !1, this.updateBlockedByResize = !1, this.isUpdating = !1, this.isSVG = !1, this.needsReset = !1, this.shouldResetTransform = !1, this.treeScale = {\n                            x: 1,\n                            y: 1\n                        }, this.eventHandlers = new Map, this.hasTreeAnimated = !1, this.updateScheduled = !1, this.checkUpdateFailed = ()=>{\n                            this.isUpdating && (this.isUpdating = !1, this.clearAllSnapshots());\n                        }, this.updateProjection = ()=>{\n                            var t1;\n                            ji.totalNodes = ji.resolvedTargetDeltas = ji.recalculatedProjection = 0, this.nodes.forEach(Ii), this.nodes.forEach(Yi), this.nodes.forEach(Xi), this.nodes.forEach(Ui), t1 = ji, window.MotionDebug && window.MotionDebug.record(t1);\n                        }, this.hasProjected = !1, this.isVisible = !0, this.animationProgress = 0, this.sharedNodes = new Map, this.latestValues = t1, this.root = n ? n.root || n : this, this.path = n ? [\n                            ...n.path,\n                            n\n                        ] : [], this.parent = n, this.depth = n ? n.depth + 1 : 0;\n                        for(let t1 = 0; t1 < this.path.length; t1++)this.path[t1].shouldResetTransform = !0;\n                        this.root === this && (this.nodes = new ki);\n                    }\n                };\n            }\n            function Fi(t1) {\n                t1.updateLayout();\n            }\n            function Oi(t1) {\n                var e;\n                const n = (null === (e = t1.resumeFrom) || void 0 === e ? void 0 : e.snapshot) || t1.snapshot;\n                if (t1.isLead() && t1.layout && n && t1.hasListeners(\"didUpdate\")) {\n                    const { layoutBox: e, measuredBox: s } = t1.layout, { animationType: i } = t1.options, o = n.source !== t1.layout.source;\n                    \"size\" === i ? js((t1)=>{\n                        const s = o ? n.measuredBox[t1] : n.layoutBox[t1], i = Ts(s);\n                        s.min = e[t1].min, s.max = s.min + i;\n                    }) : no(i, n.layoutBox, e) && js((s)=>{\n                        const i = o ? n.measuredBox[s] : n.layoutBox[s], r = Ts(e[s]);\n                        i.max = i.min + r, t1.relativeTarget && !t1.currentAnimation && (t1.isProjectionDirty = !0, t1.relativeTarget[s].max = t1.relativeTarget[s].min + r);\n                    });\n                    const r = {\n                        x: {\n                            translate: 0,\n                            scale: 1,\n                            origin: 0,\n                            originPoint: 0\n                        },\n                        y: {\n                            translate: 0,\n                            scale: 1,\n                            origin: 0,\n                            originPoint: 0\n                        }\n                    };\n                    Es(r, e, n.layoutBox);\n                    const a = {\n                        x: {\n                            translate: 0,\n                            scale: 1,\n                            origin: 0,\n                            originPoint: 0\n                        },\n                        y: {\n                            translate: 0,\n                            scale: 1,\n                            origin: 0,\n                            originPoint: 0\n                        }\n                    };\n                    o ? Es(a, t1.applyTransform(s, !0), n.measuredBox) : Es(a, e, n.layoutBox);\n                    const l = !Ei(r);\n                    let u = !1;\n                    if (!t1.resumeFrom) {\n                        const s = t1.getClosestProjectingParent();\n                        if (s && !s.resumeFrom) {\n                            const { snapshot: i, layout: o } = s;\n                            if (i && o) {\n                                const r = {\n                                    x: {\n                                        min: 0,\n                                        max: 0\n                                    },\n                                    y: {\n                                        min: 0,\n                                        max: 0\n                                    }\n                                };\n                                Cs(r, n.layoutBox, i.layoutBox);\n                                const a = {\n                                    x: {\n                                        min: 0,\n                                        max: 0\n                                    },\n                                    y: {\n                                        min: 0,\n                                        max: 0\n                                    }\n                                };\n                                Cs(a, e, o.layoutBox), Ai(r, a) || (u = !0), s.options.layoutRoot && (t1.relativeTarget = a, t1.relativeTargetOrigin = r, t1.relativeParent = s);\n                            }\n                        }\n                    }\n                    t1.notifyListeners(\"didUpdate\", {\n                        layout: e,\n                        snapshot: n,\n                        delta: a,\n                        layoutDelta: r,\n                        hasLayoutChanged: l,\n                        hasRelativeTargetChanged: u\n                    });\n                } else if (t1.isLead()) {\n                    const { onExitComplete: e } = t1.options;\n                    e && e();\n                }\n                t1.options.transition = void 0;\n            }\n            function Ii(t1) {\n                ji.totalNodes++, t1.parent && (t1.isProjecting() || (t1.isProjectionDirty = t1.parent.isProjectionDirty), t1.isSharedProjectionDirty || (t1.isSharedProjectionDirty = Boolean(t1.isProjectionDirty || t1.parent.isProjectionDirty || t1.parent.isSharedProjectionDirty)), t1.isTransformDirty || (t1.isTransformDirty = t1.parent.isTransformDirty));\n            }\n            function Ui(t1) {\n                t1.isProjectionDirty = t1.isSharedProjectionDirty = t1.isTransformDirty = !1;\n            }\n            function Ni(t1) {\n                t1.clearSnapshot();\n            }\n            function $i(t1) {\n                t1.clearMeasurements();\n            }\n            function Wi(t1) {\n                t1.isLayoutDirty = !1;\n            }\n            function Hi(t1) {\n                const { visualElement: e } = t1.options;\n                e && e.getProps().onBeforeLayoutMeasure && e.notify(\"BeforeLayoutMeasure\"), t1.resetTransform();\n            }\n            function zi(t1) {\n                t1.finishAnimation(), t1.targetDelta = t1.relativeTarget = t1.target = void 0, t1.isProjectionDirty = !0;\n            }\n            function Yi(t1) {\n                t1.resolveTargetDelta();\n            }\n            function Xi(t1) {\n                t1.calcProjection();\n            }\n            function Gi(t1) {\n                t1.resetRotation();\n            }\n            function qi(t1) {\n                t1.removeLeadSnapshot();\n            }\n            function Zi(t1, e, n) {\n                t1.translate = Kt(e.translate, 0, n), t1.scale = Kt(e.scale, 1, n), t1.origin = e.origin, t1.originPoint = e.originPoint;\n            }\n            function Ki(t1, e, n, s) {\n                t1.min = Kt(e.min, n.min, s), t1.max = Kt(e.max, n.max, s);\n            }\n            function _i(t1) {\n                return t1.animationValues && void 0 !== t1.animationValues.opacityExit;\n            }\n            const Ji = {\n                duration: .45,\n                ease: [\n                    .4,\n                    0,\n                    .1,\n                    1\n                ]\n            }, Qi = (t1)=>\"undefined\" != typeof navigator && navigator.userAgent.toLowerCase().includes(t1), to = Qi(\"applewebkit/\") && !Qi(\"chrome/\") ? Math.round : n;\n            function eo(t1) {\n                t1.min = to(t1.min), t1.max = to(t1.max);\n            }\n            function no(t1, e, n) {\n                return \"position\" === t1 || \"preserve-aspect\" === t1 && !Ss(Vi(e), Vi(n), .2);\n            }\n            const so = Bi({\n                attachResizeListener: (t1, e)=>Hn(t1, \"resize\", e),\n                measureScroll: ()=>({\n                        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n                        y: document.documentElement.scrollTop || document.body.scrollTop\n                    }),\n                checkIsScrollRoot: ()=>!0\n            }), io = {\n                current: void 0\n            }, oo = Bi({\n                measureScroll: (t1)=>({\n                        x: t1.scrollLeft,\n                        y: t1.scrollTop\n                    }),\n                defaultParent: ()=>{\n                    if (!io.current) {\n                        const t1 = new so({});\n                        t1.mount(window), t1.setOptions({\n                            layoutScroll: !0\n                        }), io.current = t1;\n                    }\n                    return io.current;\n                },\n                resetTransform: (t1, e)=>{\n                    t1.style.transform = void 0 !== e ? e : \"none\";\n                },\n                checkIsScrollRoot: (t1)=>Boolean(\"fixed\" === window.getComputedStyle(t1).position)\n            }), ro = {\n                pan: {\n                    Feature: class extends Jn {\n                        onPointerDown(t1) {\n                            this.session = new fs(t1, this.createPanHandlers(), {\n                                transformPagePoint: this.node.getTransformPagePoint()\n                            });\n                        }\n                        createPanHandlers() {\n                            const { onPanSessionStart: t1, onPanStart: e, onPan: n, onPanEnd: s } = this.node.getProps();\n                            return {\n                                onSessionStart: ei(t1),\n                                onStart: ei(e),\n                                onMove: n,\n                                onEnd: (t1, e)=>{\n                                    delete this.session, s && y.update(()=>s(t1, e));\n                                }\n                            };\n                        }\n                        mount() {\n                            this.removePointerDownListener = Xn(this.node.current, \"pointerdown\", (t1)=>this.onPointerDown(t1));\n                        }\n                        update() {\n                            this.session && this.session.updateHandlers(this.createPanHandlers());\n                        }\n                        unmount() {\n                            this.removePointerDownListener(), this.session && this.session.end();\n                        }\n                        constructor(){\n                            super(...arguments), this.removePointerDownListener = n;\n                        }\n                    }\n                },\n                drag: {\n                    Feature: class extends Jn {\n                        mount() {\n                            const { dragControls: t1 } = this.node.getProps();\n                            t1 && (this.removeGroupControls = t1.subscribe(this.controls)), this.removeListeners = this.controls.addListeners() || n;\n                        }\n                        unmount() {\n                            this.removeGroupControls(), this.removeListeners();\n                        }\n                        constructor(t1){\n                            super(t1), this.removeGroupControls = n, this.removeListeners = n, this.controls = new Qs(t1);\n                        }\n                    },\n                    ProjectionNode: oo,\n                    MeasureLayout: ai\n                }\n            }, ao = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\n            function lo(t1, e) {\n                let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n                r(n <= 4, 'Max CSS variable fallback depth detected in property \"'.concat(t1, '\". This may indicate a circular fallback dependency.'));\n                const [s, i] = function(t1) {\n                    const e = ao.exec(t1);\n                    if (!e) return [\n                        , \n                    ];\n                    const [, n, s] = e;\n                    return [\n                        n,\n                        s\n                    ];\n                }(t1);\n                if (!s) return;\n                const o = window.getComputedStyle(e).getPropertyValue(s);\n                if (o) {\n                    const t1 = o.trim();\n                    return l(t1) ? parseFloat(t1) : t1;\n                }\n                return A(i) ? lo(i, e, n + 1) : i;\n            }\n            const uo = new Set([\n                \"width\",\n                \"height\",\n                \"top\",\n                \"left\",\n                \"right\",\n                \"bottom\",\n                \"x\",\n                \"y\",\n                \"translateX\",\n                \"translateY\"\n            ]), co = (t1)=>uo.has(t1), ho = (t1)=>t1 === L || t1 === z, mo = (t1, e)=>parseFloat(t1.split(\", \")[e]), po = (t1, e)=>(n, param)=>{\n                    let { transform: s } = param;\n                    if (\"none\" === s || !s) return 0;\n                    const i = s.match(/^matrix3d\\((.+)\\)$/);\n                    if (i) return mo(i[1], e);\n                    {\n                        const e = s.match(/^matrix\\((.+)\\)$/);\n                        return e ? mo(e[1], t1) : 0;\n                    }\n                }, fo = new Set([\n                \"x\",\n                \"y\",\n                \"z\"\n            ]), go = wt.filter((t1)=>!fo.has(t1)), yo = {\n                width: (param, param1)=>{\n                    let { x: t1 } = param, { paddingLeft: e = \"0\", paddingRight: n = \"0\" } = param1;\n                    return t1.max - t1.min - parseFloat(e) - parseFloat(n);\n                },\n                height: (param, param1)=>{\n                    let { y: t1 } = param, { paddingTop: e = \"0\", paddingBottom: n = \"0\" } = param1;\n                    return t1.max - t1.min - parseFloat(e) - parseFloat(n);\n                },\n                top: (t1, param)=>{\n                    let { top: e } = param;\n                    return parseFloat(e);\n                },\n                left: (t1, param)=>{\n                    let { left: e } = param;\n                    return parseFloat(e);\n                },\n                bottom: (param, param1)=>{\n                    let { y: t1 } = param, { top: e } = param1;\n                    return parseFloat(e) + (t1.max - t1.min);\n                },\n                right: (param, param1)=>{\n                    let { x: t1 } = param, { left: e } = param1;\n                    return parseFloat(e) + (t1.max - t1.min);\n                },\n                x: po(4, 13),\n                y: po(5, 14)\n            };\n            yo.translateX = yo.x, yo.translateY = yo.y;\n            function vo(t1, e, n, s) {\n                return ((t1)=>Object.keys(t1).some(co))(e) ? function(t1, e) {\n                    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n                    e = {\n                        ...e\n                    }, s = {\n                        ...s\n                    };\n                    const i = Object.keys(e).filter(co);\n                    let o = [], a = !1;\n                    const l = [];\n                    if (i.forEach((i)=>{\n                        const u = t1.getValue(i);\n                        if (!t1.hasValue(i)) return;\n                        let h = n[i], d = gt(h);\n                        const m = e[i];\n                        let p;\n                        if (c(m)) {\n                            const t1 = m.length, e = null === m[0] ? 1 : 0;\n                            h = m[e], d = gt(h);\n                            for(let n = e; n < t1 && null !== m[n]; n++)p ? r(gt(m[n]) === p, \"All keyframes must be of the same type\") : (p = gt(m[n]), r(p === d || ho(d) && ho(p), \"Keyframes must be of the same dimension as the current value\"));\n                        } else p = gt(m);\n                        if (d !== p) if (ho(d) && ho(p)) {\n                            const t1 = u.get();\n                            \"string\" == typeof t1 && u.set(parseFloat(t1)), \"string\" == typeof m ? e[i] = parseFloat(m) : Array.isArray(m) && p === z && (e[i] = m.map(parseFloat));\n                        } else (null == d ? void 0 : d.transform) && (null == p ? void 0 : p.transform) && (0 === h || 0 === m) ? 0 === h ? u.set(p.transform(h)) : e[i] = d.transform(m) : (a || (o = function(t1) {\n                            const e = [];\n                            return go.forEach((n)=>{\n                                const s = t1.getValue(n);\n                                void 0 !== s && (e.push([\n                                    n,\n                                    s.get()\n                                ]), s.set(n.startsWith(\"scale\") ? 1 : 0));\n                            }), e.length && t1.render(), e;\n                        }(t1), a = !0), l.push(i), s[i] = void 0 !== s[i] ? s[i] : e[i], u.jump(m));\n                    }), l.length) {\n                        const n = l.indexOf(\"height\") >= 0 ? window.pageYOffset : null, i = ((t1, e, n)=>{\n                            const s = e.measureViewportBox(), i = e.current, o = getComputedStyle(i), { display: r } = o, a = {};\n                            \"none\" === r && e.setStaticValue(\"display\", t1.display || \"block\"), n.forEach((t1)=>{\n                                a[t1] = yo[t1](s, o);\n                            }), e.render();\n                            const l = e.measureViewportBox();\n                            return n.forEach((n)=>{\n                                const s = e.getValue(n);\n                                s && s.jump(a[n]), t1[n] = yo[n](l, o);\n                            }), t1;\n                        })(e, t1, l);\n                        return o.length && o.forEach((param)=>{\n                            let [e, n] = param;\n                            t1.getValue(e).set(n);\n                        }), t1.render(), He && null !== n && window.scrollTo({\n                            top: n\n                        }), {\n                            target: i,\n                            transitionEnd: s\n                        };\n                    }\n                    return {\n                        target: e,\n                        transitionEnd: s\n                    };\n                }(t1, e, n, s) : {\n                    target: e,\n                    transitionEnd: s\n                };\n            }\n            const xo = {\n                current: null\n            }, Po = {\n                current: !1\n            }, bo = new WeakMap, To = Object.keys(on), So = To.length, wo = [\n                \"AnimationStart\",\n                \"AnimationComplete\",\n                \"Update\",\n                \"BeforeLayoutMeasure\",\n                \"LayoutMeasure\",\n                \"LayoutAnimationStart\",\n                \"LayoutAnimationComplete\"\n            ], Eo = Qe.length;\n            class Ao extends class {\n                scrapeMotionValuesFromProps(t1, e) {\n                    return {};\n                }\n                mount(t1) {\n                    this.current = t1, bo.set(t1, this), this.projection && !this.projection.instance && this.projection.mount(t1), this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)), this.values.forEach((t1, e)=>this.bindToMotionValue(e, t1)), Po.current || function() {\n                        if (Po.current = !0, He) if (window.matchMedia) {\n                            const t1 = window.matchMedia(\"(prefers-reduced-motion)\"), e = ()=>xo.current = t1.matches;\n                            t1.addListener(e), e();\n                        } else xo.current = !1;\n                    }(), this.shouldReduceMotion = \"never\" !== this.reducedMotionConfig && (\"always\" === this.reducedMotionConfig || xo.current), this.parent && this.parent.children.add(this), this.update(this.props, this.presenceContext);\n                }\n                unmount() {\n                    bo.delete(this.current), this.projection && this.projection.unmount(), v(this.notifyUpdate), v(this.render), this.valueSubscriptions.forEach((t1)=>t1()), this.removeFromVariantTree && this.removeFromVariantTree(), this.parent && this.parent.children.delete(this);\n                    for(const t1 in this.events)this.events[t1].clear();\n                    for(const t1 in this.features)this.features[t1].unmount();\n                    this.current = null;\n                }\n                bindToMotionValue(t1, e) {\n                    const n = Et.has(t1), s = e.on(\"change\", (e)=>{\n                        this.latestValues[t1] = e, this.props.onUpdate && y.update(this.notifyUpdate, !1, !0), n && this.projection && (this.projection.isTransformDirty = !0);\n                    }), i = e.on(\"renderRequest\", this.scheduleRender);\n                    this.valueSubscriptions.set(t1, ()=>{\n                        s(), i();\n                    });\n                }\n                sortNodePosition(t1) {\n                    return this.current && this.sortInstanceNodePosition && this.type === t1.type ? this.sortInstanceNodePosition(this.current, t1.current) : 0;\n                }\n                loadFeatures(param, n, s, i) {\n                    let { children: t1, ...e } = param;\n                    let o, r;\n                    for(let t1 = 0; t1 < So; t1++){\n                        const n = To[t1], { isEnabled: s, Feature: i, ProjectionNode: a, MeasureLayout: l } = on[n];\n                        a && (o = a), s(e) && (!this.features[n] && i && (this.features[n] = new i(this)), l && (r = l));\n                    }\n                    if (!this.projection && o) {\n                        this.projection = new o(this.latestValues, this.parent && this.parent.projection);\n                        const { layoutId: t1, layout: n, drag: s, dragConstraints: r, layoutScroll: a, layoutRoot: l } = e;\n                        this.projection.setOptions({\n                            layoutId: t1,\n                            layout: n,\n                            alwaysMeasureLayout: Boolean(s) || r && Ze(r),\n                            visualElement: this,\n                            scheduleRender: ()=>this.scheduleRender(),\n                            animationType: \"string\" == typeof n ? n : \"both\",\n                            initialPromotionConfig: i,\n                            layoutScroll: a,\n                            layoutRoot: l\n                        });\n                    }\n                    return r;\n                }\n                updateFeatures() {\n                    for(const t1 in this.features){\n                        const e = this.features[t1];\n                        e.isMounted ? e.update() : (e.mount(), e.isMounted = !0);\n                    }\n                }\n                triggerBuild() {\n                    this.build(this.renderState, this.latestValues, this.options, this.props);\n                }\n                measureViewportBox() {\n                    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : {\n                        x: {\n                            min: 0,\n                            max: 0\n                        },\n                        y: {\n                            min: 0,\n                            max: 0\n                        }\n                    };\n                }\n                getStaticValue(t1) {\n                    return this.latestValues[t1];\n                }\n                setStaticValue(t1, e) {\n                    this.latestValues[t1] = e;\n                }\n                makeTargetAnimatable(t1) {\n                    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n                    return this.makeTargetAnimatableFromInstance(t1, this.props, e);\n                }\n                update(t1, e) {\n                    (t1.transformTemplate || this.props.transformTemplate) && this.scheduleRender(), this.prevProps = this.props, this.props = t1, this.prevPresenceContext = this.presenceContext, this.presenceContext = e;\n                    for(let e = 0; e < wo.length; e++){\n                        const n = wo[e];\n                        this.propEventSubscriptions[n] && (this.propEventSubscriptions[n](), delete this.propEventSubscriptions[n]);\n                        const s = t1[\"on\" + n];\n                        s && (this.propEventSubscriptions[n] = this.on(n, s));\n                    }\n                    this.prevMotionValues = function(t1, e, n) {\n                        const { willChange: s } = e;\n                        for(const i in e){\n                            const o = e[i], r = n[i];\n                            if (je(o)) t1.addValue(i, o), Be(s) && s.add(i);\n                            else if (je(r)) t1.addValue(i, S(o, {\n                                owner: t1\n                            })), Be(s) && s.remove(i);\n                            else if (r !== o) if (t1.hasValue(i)) {\n                                const e = t1.getValue(i);\n                                !e.hasAnimated && e.set(o);\n                            } else {\n                                const e = t1.getStaticValue(i);\n                                t1.addValue(i, S(void 0 !== e ? e : o, {\n                                    owner: t1\n                                }));\n                            }\n                        }\n                        for(const s in n)void 0 === e[s] && t1.removeValue(s);\n                        return e;\n                    }(this, this.scrapeMotionValuesFromProps(t1, this.prevProps), this.prevMotionValues), this.handleChildMotionValue && this.handleChildMotionValue();\n                }\n                getProps() {\n                    return this.props;\n                }\n                getVariant(t1) {\n                    return this.props.variants ? this.props.variants[t1] : void 0;\n                }\n                getDefaultTransition() {\n                    return this.props.transition;\n                }\n                getTransformPagePoint() {\n                    return this.props.transformPagePoint;\n                }\n                getClosestVariantNode() {\n                    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;\n                }\n                getVariantContext() {\n                    let t1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n                    if (t1) return this.parent ? this.parent.getVariantContext() : void 0;\n                    if (!this.isControllingVariants) {\n                        const t1 = this.parent && this.parent.getVariantContext() || {};\n                        return void 0 !== this.props.initial && (t1.initial = this.props.initial), t1;\n                    }\n                    const e = {};\n                    for(let t1 = 0; t1 < Eo; t1++){\n                        const n = Qe[t1], s = this.props[n];\n                        (Ke(s) || !1 === s) && (e[n] = s);\n                    }\n                    return e;\n                }\n                addVariantChild(t1) {\n                    const e = this.getClosestVariantNode();\n                    if (e) return e.variantChildren && e.variantChildren.add(t1), ()=>e.variantChildren.delete(t1);\n                }\n                addValue(t1, e) {\n                    e !== this.values.get(t1) && (this.removeValue(t1), this.bindToMotionValue(t1, e)), this.values.set(t1, e), this.latestValues[t1] = e.get();\n                }\n                removeValue(t1) {\n                    this.values.delete(t1);\n                    const e = this.valueSubscriptions.get(t1);\n                    e && (e(), this.valueSubscriptions.delete(t1)), delete this.latestValues[t1], this.removeValueFromRenderState(t1, this.renderState);\n                }\n                hasValue(t1) {\n                    return this.values.has(t1);\n                }\n                getValue(t1, e) {\n                    if (this.props.values && this.props.values[t1]) return this.props.values[t1];\n                    let n = this.values.get(t1);\n                    return void 0 === n && void 0 !== e && (n = S(e, {\n                        owner: this\n                    }), this.addValue(t1, n)), n;\n                }\n                readValue(t1) {\n                    var e;\n                    return void 0 === this.latestValues[t1] && this.current ? null !== (e = this.getBaseTargetFromProps(this.props, t1)) && void 0 !== e ? e : this.readValueFromInstance(this.current, t1, this.options) : this.latestValues[t1];\n                }\n                setBaseTarget(t1, e) {\n                    this.baseTarget[t1] = e;\n                }\n                getBaseTarget(t1) {\n                    var e;\n                    const { initial: n } = this.props, s = \"string\" == typeof n || \"object\" == typeof n ? null === (e = vt(this.props, n)) || void 0 === e ? void 0 : e[t1] : void 0;\n                    if (n && void 0 !== s) return s;\n                    const i = this.getBaseTargetFromProps(this.props, t1);\n                    return void 0 === i || je(i) ? void 0 !== this.initialValues[t1] && void 0 === s ? void 0 : this.baseTarget[t1] : i;\n                }\n                on(t1, e) {\n                    return this.events[t1] || (this.events[t1] = new m), this.events[t1].add(e);\n                }\n                notify(t1) {\n                    for(var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        e[_key - 1] = arguments[_key];\n                    }\n                    this.events[t1] && this.events[t1].notify(...e);\n                }\n                constructor({ parent: t1, props: e, presenceContext: n, reducedMotionConfig: s, visualState: i }, o = {}){\n                    this.current = null, this.children = new Set, this.isVariantNode = !1, this.isControllingVariants = !1, this.shouldReduceMotion = null, this.values = new Map, this.features = {}, this.valueSubscriptions = new Map, this.prevMotionValues = {}, this.events = {}, this.propEventSubscriptions = {}, this.notifyUpdate = ()=>this.notify(\"Update\", this.latestValues), this.render = ()=>{\n                        this.current && (this.triggerBuild(), this.renderInstance(this.current, this.renderState, this.props.style, this.projection));\n                    }, this.scheduleRender = ()=>y.render(this.render, !1, !0);\n                    const { latestValues: r, renderState: a } = i;\n                    this.latestValues = r, this.baseTarget = {\n                        ...r\n                    }, this.initialValues = e.initial ? {\n                        ...r\n                    } : {}, this.renderState = a, this.parent = t1, this.props = e, this.presenceContext = n, this.depth = t1 ? t1.depth + 1 : 0, this.reducedMotionConfig = s, this.options = o, this.isControllingVariants = tn(e), this.isVariantNode = en(e), this.isVariantNode && (this.variantChildren = new Set), this.manuallyAnimateOnMount = Boolean(t1 && t1.current);\n                    const { willChange: l, ...u } = this.scrapeMotionValuesFromProps(e, {});\n                    for(const t1 in u){\n                        const e = u[t1];\n                        void 0 !== r[t1] && je(e) && (e.set(r[t1], !1), Be(l) && l.add(t1));\n                    }\n                }\n            } {\n                sortInstanceNodePosition(t1, e) {\n                    return 2 & t1.compareDocumentPosition(e) ? 1 : -1;\n                }\n                getBaseTargetFromProps(t1, e) {\n                    return t1.style ? t1.style[e] : void 0;\n                }\n                removeValueFromRenderState(t1, param) {\n                    let { vars: e, style: n } = param;\n                    delete e[t1], delete n[t1];\n                }\n                makeTargetAnimatableFromInstance(param, param1, i) {\n                    let { transition: t1, transitionEnd: e, ...n } = param, { transformValues: s } = param1;\n                    let o = function(t1, e, n) {\n                        const s = {};\n                        for(const i in t1){\n                            const t1 = St(i, e);\n                            if (void 0 !== t1) s[i] = t1;\n                            else {\n                                const t1 = n.getValue(i);\n                                t1 && (s[i] = t1.get());\n                            }\n                        }\n                        return s;\n                    }(n, t1 || {}, this);\n                    if (s && (e && (e = s(e)), n && (n = s(n)), o && (o = s(o))), i) {\n                        !function(t1, e, n) {\n                            var s, i;\n                            const o = Object.keys(e).filter((e)=>!t1.hasValue(e)), r = o.length;\n                            var a;\n                            if (r) for(let c = 0; c < r; c++){\n                                const r = o[c], h = e[r];\n                                let d = null;\n                                Array.isArray(h) && (d = h[0]), null === d && (d = null !== (i = null !== (s = n[r]) && void 0 !== s ? s : t1.readValue(r)) && void 0 !== i ? i : e[r]), null != d && (\"string\" == typeof d && (l(d) || u(d)) ? d = parseFloat(d) : (a = d, !yt.find(pt(a)) && it.test(h) && (d = mt(r, h))), t1.addValue(r, S(d, {\n                                    owner: t1\n                                })), void 0 === n[r] && (n[r] = d), null !== d && t1.setBaseTarget(r, d));\n                            }\n                        }(this, n, o);\n                        const t1 = ((t1, e, n, s)=>{\n                            const i = function(t1, param, n) {\n                                let { ...e } = param;\n                                const s = t1.current;\n                                if (!(s instanceof Element)) return {\n                                    target: e,\n                                    transitionEnd: n\n                                };\n                                n && (n = {\n                                    ...n\n                                }), t1.values.forEach((t1)=>{\n                                    const e = t1.get();\n                                    if (!A(e)) return;\n                                    const n = lo(e, s);\n                                    n && t1.set(n);\n                                });\n                                for(const t1 in e){\n                                    const i = e[t1];\n                                    if (!A(i)) continue;\n                                    const o = lo(i, s);\n                                    o && (e[t1] = o, n || (n = {}), void 0 === n[t1] && (n[t1] = i));\n                                }\n                                return {\n                                    target: e,\n                                    transitionEnd: n\n                                };\n                            }(t1, e, s);\n                            return vo(t1, e = i.target, n, s = i.transitionEnd);\n                        })(this, n, o, e);\n                        e = t1.transitionEnd, n = t1.target;\n                    }\n                    return {\n                        transition: t1,\n                        transitionEnd: e,\n                        ...n\n                    };\n                }\n            }\n            class Vo extends Ao {\n                readValueFromInstance(t1, e) {\n                    if (Et.has(e)) {\n                        const t1 = dt(e);\n                        return t1 && t1.default || 0;\n                    }\n                    {\n                        const s = (n = t1, window.getComputedStyle(n)), i = (E(e) ? s.getPropertyValue(e) : s[e]) || 0;\n                        return \"string\" == typeof i ? i.trim() : i;\n                    }\n                    var n;\n                }\n                measureInstanceViewportBox(t1, param) {\n                    let { transformPagePoint: e } = param;\n                    return _s1(t1, e);\n                }\n                build(t1, e, n, s) {\n                    xn(t1, e, n, s.transformTemplate);\n                }\n                scrapeMotionValuesFromProps(t1, e) {\n                    return Fn(t1, e);\n                }\n                handleChildMotionValue() {\n                    this.childSubscription && (this.childSubscription(), delete this.childSubscription);\n                    const { children: t1 } = this.props;\n                    je(t1) && (this.childSubscription = t1.on(\"change\", (t1)=>{\n                        this.current && (this.current.textContent = \"\".concat(t1));\n                    }));\n                }\n                renderInstance(t1, e, n, s) {\n                    Ln(t1, e, n, s);\n                }\n            }\n            class Co extends Ao {\n                getBaseTargetFromProps(t1, e) {\n                    return t1[e];\n                }\n                readValueFromInstance(t1, e) {\n                    if (Et.has(e)) {\n                        const t1 = dt(e);\n                        return t1 && t1.default || 0;\n                    }\n                    return e = jn.has(e) ? e : At(e), t1.getAttribute(e);\n                }\n                measureInstanceViewportBox() {\n                    return {\n                        x: {\n                            min: 0,\n                            max: 0\n                        },\n                        y: {\n                            min: 0,\n                            max: 0\n                        }\n                    };\n                }\n                scrapeMotionValuesFromProps(t1, e) {\n                    return On(t1, e);\n                }\n                build(t1, e, n, s) {\n                    Mn(t1, e, n, this.isSVGTag, s.transformTemplate);\n                }\n                renderInstance(t1, e, n, s) {\n                    Bn(t1, e, 0, s);\n                }\n                mount(t1) {\n                    this.isSVGTag = Dn(t1.tagName), super.mount(t1);\n                }\n                constructor(){\n                    super(...arguments), this.isSVGTag = !1;\n                }\n            }\n            const Mo = (t1, e)=>mn(t1) ? new Co(e, {\n                    enableHardwareAcceleration: !1\n                }) : new Vo(e, {\n                    enableHardwareAcceleration: !0\n                }), Do = {\n                ...ms,\n                ...as,\n                ...ro,\n                layout: {\n                    ProjectionNode: oo,\n                    MeasureLayout: ai\n                }\n            }, ko = hn((t1, e)=>(function(t1, param, n, s) {\n                    let { forwardMotionProps: e = !1 } = param;\n                    return {\n                        ...mn(t1) ? $n : Wn,\n                        preloadedFeatures: n,\n                        useRender: Rn(e),\n                        createVisualElement: s,\n                        Component: t1\n                    };\n                })(t1, e, Do, Mo)), Ro = [\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9\n            ], Lo = (param)=>{\n                let { className: n, animateToNumber: s, fontStyle: i, transitions: o, includeComma: r, locale: l } = param;\n                _s();\n                const u = e().useRef(null), c = function(e) {\n                    let { root: n, margin: s, amount: i, once: o = !1 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                    const [r, l] = (0, t1.useState)(!1);\n                    return (0, t1.useEffect)(()=>{\n                        if (!e.current || o && r) return;\n                        const t1 = {\n                            root: n && n.current || void 0,\n                            margin: s,\n                            amount: i\n                        };\n                        return function(t1, e) {\n                            let { root: n, margin: s, amount: i = \"some\" } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                            const o = function(t1, e, n) {\n                                if (\"string\" == typeof t1) {\n                                    t1 = document.querySelectorAll(t1);\n                                } else t1 instanceof Element && (t1 = [\n                                    t1\n                                ]);\n                                return Array.from(t1 || []);\n                            }(t1), r = new WeakMap, l = new IntersectionObserver((t1)=>{\n                                t1.forEach((t1)=>{\n                                    const n = r.get(t1.target);\n                                    if (t1.isIntersecting !== Boolean(n)) if (t1.isIntersecting) {\n                                        const n = e(t1);\n                                        \"function\" == typeof n ? r.set(t1.target, n) : l.unobserve(t1.target);\n                                    } else n && (n(t1), r.delete(t1.target));\n                                });\n                            }, {\n                                root: n,\n                                rootMargin: s,\n                                threshold: \"number\" == typeof i ? i : a[i]\n                            });\n                            return o.forEach((t1)=>l.observe(t1)), ()=>l.disconnect();\n                        }(e.current, ()=>(l(!0), o ? void 0 : ()=>l(!1)), t1);\n                    }, [\n                        n,\n                        e,\n                        s,\n                        o\n                    ]), r;\n                }(u, {\n                    once: !0\n                }), h = function() {\n                    const t1 = We($e);\n                    return ze(t1.mount, []), t1;\n                }(), d = e().useRef(0), m = r ? Math.abs(s).toLocaleString(l || \"en-US\") : String(Math.abs(s)), p = Array.from(m, Number).map((t1, e)=>isNaN(t1) ? m[e] : t1), [f, g] = e().useState(0), [y, v] = e().useState(0), x = e().useRef(null);\n                return e().useEffect(()=>{\n                    var t1;\n                    const e = null === (t1 = x.current.getClientRects()) || void 0 === t1 ? void 0 : t1[0];\n                    e && (g(e.height), v(e.width));\n                }, [\n                    s,\n                    i\n                ]), e().useEffect(()=>{\n                    c && h.start(\"visible\");\n                }, [\n                    c,\n                    s\n                ]), e().createElement(\"span\", {\n                    ref: u\n                }, 0 !== f && e().createElement(\"div\", {\n                    style: {\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        overflow: \"hidden\"\n                    },\n                    className: n\n                }, p.map((t1, n)=>\"string\" == typeof t1 ? e().createElement(\"div\", {\n                        key: n,\n                        style: {\n                            ...i,\n                            fontVariantNumeric: \"tabular-nums\"\n                        }\n                    }, t1) : e().createElement(\"div\", {\n                        key: n,\n                        style: {\n                            height: f,\n                            width: y\n                        }\n                    }, Ro.map((t1)=>e().createElement(ko.div, {\n                            style: {\n                                ...i,\n                                fontVariantNumeric: \"tabular-nums\"\n                            },\n                            key: \"\" + d.current++,\n                            initial: \"hidden\",\n                            variants: {\n                                hidden: {\n                                    y: 0\n                                },\n                                visible: {\n                                    y: f * p[n] * -1 - 20 * f\n                                }\n                            },\n                            animate: h,\n                            transition: null == o ? void 0 : o(n)\n                        }, t1))))), e().createElement(\"div\", {\n                    ref: x,\n                    style: {\n                        position: \"absolute\",\n                        top: -9999,\n                        ...i\n                    }\n                }, 0));\n            }, jo = e().memo(Lo, (t1, e)=>t1.animateToNumber === e.animateToNumber && t1.fontStyle === e.fontStyle && t1.includeComma === e.includeComma);\n            _s(Lo, \"MVDXvnVaaxyes8lKL4lVmKAtuKA=\");\n        })(), i;\n    })();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-animated-numbers/dist/index.js\n"));

/***/ })

}]);